{"ast":null,"code":"var _jsxFileName = \"/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PageNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleScroll = e => {\n      const scrollY = window.scrollY;\n      const maxScrollY = document.body.scrollHeight - window.innerHeight;\n      const scrollPercent = `${scrollY / maxScrollY * 100}%`;\n      console.log('window.pageYOffset || document.documentElement.scrollTop =', window.pageYOffset || document.documentElement.scrollTop);\n      console.log('scrollPercent =', scrollPercent);\n      console.log('scrollY =', scrollY);\n      console.log('sectionsBounds =', PageNav.sectionsBounds); //get the binding rects for each section\n\n      let currentSection = null;\n      let percentThroughSection = '';\n      const sections = document.querySelectorAll('[data-section]'); // const sectionsBounds = {};\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const boundingRect = section.getBoundingClientRect();\n\n        if (boundingRect.top >= 0) {\n          currentSection = section[i - 1];\n          percentThroughSection = Math.abs(currentSection.top) / (Math.abs(currentSection.top) + Math.abs(currentSection.bottom) * 100);\n          console.log('currentSection =', currentSection);\n          break;\n        } // sectionsBounds[section.dataset.section] = boundingRect;\n\n      } // PageNav.sectionsBounds = sectionsBounds;\n\n    };\n\n    this.setGradientPercent = () => {\n      const newGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} 100%)`;\n      document.documentElement.style.setProperty(PageNav.gradientVarName, newGradient);\n    };\n\n    this.renderSections = () => {\n      var _this$props$match;\n\n      this.setGradientPercent();\n      const {\n        previousUrl\n      } = this.props;\n      const currentUrl = (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.url;\n      if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n      let sectionNames = [];\n      const sections = document.querySelectorAll('[data-section]');\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const capitalized = capitalize(section.dataset.section);\n        sectionNames.push(capitalized);\n      }\n\n      return sectionNames.map((sectionName, index, array) => {\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `${this.props.match.url}#${sectionName === null || sectionName === void 0 ? void 0 : sectionName.toLowerCase()}`,\n          className: `${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`,\n          children: [sectionName, \"\\xA0\", index < array.length - 1 ? '/' : null, \"\\xA0\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this);\n      });\n    };\n  }\n\n  // static sectionsBounds = {};\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(\n    /*#__PURE__*/\n    //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n    _jsxDEV(React.Fragment, {\n      children: this.renderSections()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), document.querySelector('.page-nav'));\n  }\n\n}\n\nPageNav.cssClass = 'page-nav';\nPageNav.gradientVarName = '--site-nav-linear-gradient';\nPageNav.mainColor = '#f4d160';\nPageNav.progressColor = '#8ac4d0';\nPageNav.progressPercent = '22.5%';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    previousUrl: state.general.previousUrl\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent\n})(PageNav);","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js"],"names":["React","ReactDOM","connect","Link","setPreviousUrl","setScrollPercent","capitalize","PageNav","Component","handleScroll","e","scrollY","window","maxScrollY","document","body","scrollHeight","innerHeight","scrollPercent","console","log","pageYOffset","documentElement","scrollTop","sectionsBounds","currentSection","percentThroughSection","sections","querySelectorAll","i","length","section","boundingRect","getBoundingClientRect","top","Math","abs","bottom","setGradientPercent","newGradient","progressColor","progressPercent","mainColor","style","setProperty","gradientVarName","renderSections","previousUrl","props","currentUrl","match","url","sectionNames","capitalized","dataset","push","map","sectionName","index","array","toLowerCase","cssClass","componentDidMount","addEventListener","render","createPortal","querySelector","mapStateToProps","state","ownProps","general"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\n\nclass PageNav extends React.Component {\n  static cssClass = 'page-nav';\n  static gradientVarName = '--site-nav-linear-gradient';\n  static mainColor = '#f4d160';\n  static progressColor = '#8ac4d0';\n  static progressPercent = '22.5%';\n  // static sectionsBounds = {};\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n\n    \n  }\n\n  handleScroll = (e) => {\n    const scrollY = window.scrollY;\n    const maxScrollY = document.body.scrollHeight - window.innerHeight;\n    const scrollPercent = `${scrollY / maxScrollY * 100}%`;\n    console.log('window.pageYOffset || document.documentElement.scrollTop =', window.pageYOffset || document.documentElement.scrollTop);\n    console.log('scrollPercent =', scrollPercent);\n    console.log('scrollY =', scrollY);\n    console.log('sectionsBounds =', PageNav.sectionsBounds);\n\n    //get the binding rects for each section\n    let currentSection = null;\n    let percentThroughSection = '';\n    const sections = document.querySelectorAll('[data-section]');\n    // const sectionsBounds = {};\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const boundingRect = section.getBoundingClientRect();\n\n      if (boundingRect.top >= 0) {\n        currentSection = section[i - 1];\n       percentThroughSection = Math.abs(currentSection.top) / (Math.abs(currentSection.top) + Math.abs(currentSection.bottom)  * 100)\n\n        console.log('currentSection =', currentSection);\n        break;\n      }\n      \n      // sectionsBounds[section.dataset.section] = boundingRect;\n    }\n\n  \n\n\n    // PageNav.sectionsBounds = sectionsBounds;\n  }\n\n  setGradientPercent = () => {\n    const newGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} 100%)`\n    ;\n    document.documentElement.style.setProperty(PageNav.gradientVarName, newGradient);\n  }\n\n  renderSections = () => {\n    this.setGradientPercent();\n    const { previousUrl } = this.props;\n    const currentUrl = this.props.match?.url;\n\n    if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n\n    let sectionNames = [];\n    const sections = document.querySelectorAll('[data-section]');\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const capitalized = capitalize(section.dataset.section);\n      sectionNames.push(capitalized)\n    }\n    \n    return sectionNames.map((sectionName, index, array) => {\n      return (\n        <a href={`${this.props.match.url}#${sectionName?.toLowerCase()}`} key={index} className={`${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`}>\n          {sectionName}\n          &nbsp;\n          {index < (array.length - 1) ?\n            '/'  \n          : \n            null\n          }\n          &nbsp;\n        </a>\n      );\n    });\n  }\n\n  render() {\n    return (\n      ReactDOM.createPortal(\n        //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n        <React.Fragment>\n          {this.renderSections()}\n        </React.Fragment>\n      ,\n        document.querySelector('.page-nav')\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { \n    previousUrl: state.general.previousUrl\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent,\n})(PageNav);"]},"metadata":{},"sourceType":"module"}