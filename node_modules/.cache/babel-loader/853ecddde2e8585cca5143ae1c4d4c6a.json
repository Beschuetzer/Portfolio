{"ast":null,"code":"var _jsxFileName = \"/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setPreviousUrl } from '../../actions';\nimport { capitalize } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PageNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.setScrollProgress = () => {\n      let docStyle = getComputedStyle(document.documentElement);\n      let myVarVal = docStyle.getPropertyValue(PageNav.gradientVarName);\n      debugger;\n      const newGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} 100%)`;\n      document.documentElement.style.setProperty(PageNav.gradientVarName, newGradient);\n    };\n\n    this.renderSections = () => {\n      var _this$props$match;\n\n      this.setScrollProgress();\n      const {\n        previousUrl\n      } = this.props;\n      const currentUrl = (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.url;\n      if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n      let sectionNames = [];\n      const sections = document.querySelectorAll('[data-section]');\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const capitalized = capitalize(section.dataset.section);\n        sectionNames.push(capitalized);\n      }\n\n      return sectionNames.map((sectionName, index, array) => {\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `${this.props.match.url}#${sectionName === null || sectionName === void 0 ? void 0 : sectionName.toLowerCase()}`,\n          className: `${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`,\n          children: [sectionName, \"\\xA0\", index < array.length - 1 ? '/' : null, \"\\xA0\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this);\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(\n    /*#__PURE__*/\n    //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n    _jsxDEV(React.Fragment, {\n      children: this.renderSections()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), document.querySelector('.page-nav'));\n  }\n\n}\n\nPageNav.cssClass = 'page-nav';\nPageNav.gradientVarName = '--site-nav-linear-gradient';\nPageNav.mainColor = '#28527a';\nPageNav.progressColor = '#8ac4d0';\nPageNav.progressPercent = '0%';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    previousUrl: state.general.previousUrl\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl\n})(PageNav);","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js"],"names":["React","ReactDOM","connect","Link","setPreviousUrl","capitalize","PageNav","Component","setScrollProgress","docStyle","getComputedStyle","document","documentElement","myVarVal","getPropertyValue","gradientVarName","newGradient","progressColor","progressPercent","mainColor","style","setProperty","renderSections","previousUrl","props","currentUrl","match","url","sectionNames","sections","querySelectorAll","i","length","section","capitalized","dataset","push","map","sectionName","index","array","toLowerCase","cssClass","render","createPortal","querySelector","mapStateToProps","state","ownProps","general"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,UAAT,QAA2B,eAA3B;;;AAEA,MAAMC,OAAN,SAAsBN,KAAK,CAACO,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAOpCC,iBAPoC,GAOhB,MAAM;AACxB,UAAIC,QAAQ,GAAGC,gBAAgB,CAACC,QAAQ,CAACC,eAAV,CAA/B;AACA,UAAIC,QAAQ,GAAGJ,QAAQ,CAACK,gBAAT,CAA0BR,OAAO,CAACS,eAAlC,CAAf;AAEA;AACA,YAAMC,WAAW,GAAI;AACzB;AACA,UAAUV,OAAO,CAACW,aAAc;AAChC,UAAUX,OAAO,CAACW,aAAc,IAAGX,OAAO,CAACY,eAAgB;AAC3D,UAAUZ,OAAO,CAACa,SAAU,IAAGb,OAAO,CAACY,eAAgB;AACvD,UAAUZ,OAAO,CAACa,SAAU,QALxB;AAQAR,MAAAA,QAAQ,CAACC,eAAT,CAAyBQ,KAAzB,CAA+BC,WAA/B,CAA2Cf,OAAO,CAACS,eAAnD,EAAoEC,WAApE;AACD,KArBmC;;AAAA,SAuBpCM,cAvBoC,GAuBnB,MAAM;AAAA;;AACrB,WAAKd,iBAAL;AACA,YAAM;AAAEe,QAAAA;AAAF,UAAkB,KAAKC,KAA7B;AACA,YAAMC,UAAU,wBAAG,KAAKD,KAAL,CAAWE,KAAd,sDAAG,kBAAkBC,GAArC;AAEA,UAAI,CAACJ,WAAD,IAAgBA,WAAW,KAAKE,UAApC,EAAgD,KAAKD,KAAL,CAAWpB,cAAX,CAA0BqB,UAA1B;AAEhD,UAAIG,YAAY,GAAG,EAAnB;AACA,YAAMC,QAAQ,GAAGlB,QAAQ,CAACmB,gBAAT,CAA0B,gBAA1B,CAAjB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAME,OAAO,GAAGJ,QAAQ,CAACE,CAAD,CAAxB;AAIA,cAAMG,WAAW,GAAG7B,UAAU,CAAC4B,OAAO,CAACE,OAAR,CAAgBF,OAAjB,CAA9B;AACAL,QAAAA,YAAY,CAACQ,IAAb,CAAkBF,WAAlB;AACD;;AAED,aAAON,YAAY,CAACS,GAAb,CAAiB,CAACC,WAAD,EAAcC,KAAd,EAAqBC,KAArB,KAA+B;AACrD,4BACE;AAAG,UAAA,IAAI,EAAG,GAAE,KAAKhB,KAAL,CAAWE,KAAX,CAAiBC,GAAI,IAAGW,WAA3B,aAA2BA,WAA3B,uBAA2BA,WAAW,CAAEG,WAAb,EAA2B,EAA/D;AAA8E,UAAA,SAAS,EAAG,GAAEnC,OAAO,CAACoC,QAAS,aAAYpC,OAAO,CAACoC,QAAS,aAAYJ,WAAY,EAAlK;AAAA,qBACGA,WADH,UAGGC,KAAK,GAAIC,KAAK,CAACR,MAAN,GAAe,CAAxB,GACC,GADD,GAGC,IANJ;AAAA,WAAuEO,KAAvE;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD,OAbM,CAAP;AAcD,KAxDmC;AAAA;;AA0DpCI,EAAAA,MAAM,GAAG;AACP,wBACE1C,QAAQ,CAAC2C,YAAT;AAAA;AACE;AACA,YAAC,KAAD,CAAO,QAAP;AAAA,gBACG,KAAKtB,cAAL;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,EAMEX,QAAQ,CAACkC,aAAT,CAAuB,WAAvB,CANF,CADF;AAUD;;AArEmC;;AAAhCvC,O,CACGoC,Q,GAAW,U;AADdpC,O,CAEGS,e,GAAkB,4B;AAFrBT,O,CAGGa,S,GAAY,S;AAHfb,O,CAIGW,a,GAAgB,S;AAJnBX,O,CAKGY,e,GAAkB,I;;AAmE3B,MAAM4B,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AACLzB,IAAAA,WAAW,EAAEwB,KAAK,CAACE,OAAN,CAAc1B;AADtB,GAAP;AAGD,CAJD;;AAMA,eAAerB,OAAO,CAAC4C,eAAD,EAAkB;AACtC1C,EAAAA;AADsC,CAAlB,CAAP,CAEZE,OAFY,CAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { setPreviousUrl } from '../../actions';\nimport { capitalize } from '../../helpers';\n\nclass PageNav extends React.Component {\n  static cssClass = 'page-nav';\n  static gradientVarName = '--site-nav-linear-gradient';\n  static mainColor = '#28527a';\n  static progressColor = '#8ac4d0';\n  static progressPercent = '0%';\n\n  setScrollProgress = () => {\n    let docStyle = getComputedStyle(document.documentElement);\n    let myVarVal = docStyle.getPropertyValue(PageNav.gradientVarName);\n    \n    debugger\n    const newGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} ${PageNav.progressPercent},\n        ${PageNav.mainColor} 100%)`\n    ;\n    \n    document.documentElement.style.setProperty(PageNav.gradientVarName, newGradient);\n  }\n\n  renderSections = () => {\n    this.setScrollProgress();\n    const { previousUrl } = this.props;\n    const currentUrl = this.props.match?.url;\n\n    if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n\n    let sectionNames = [];\n    const sections = document.querySelectorAll('[data-section]');\n\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      \n\n\n      const capitalized = capitalize(section.dataset.section);\n      sectionNames.push(capitalized)\n    }\n    \n    return sectionNames.map((sectionName, index, array) => {\n      return (\n        <a href={`${this.props.match.url}#${sectionName?.toLowerCase()}`} key={index} className={`${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`}>\n          {sectionName}\n          &nbsp;\n          {index < (array.length - 1) ?\n            '/'  \n          : \n            null\n          }\n          &nbsp;\n        </a>\n      );\n    });\n  }\n\n  render() {\n    return (\n      ReactDOM.createPortal(\n        //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n        <React.Fragment>\n          {this.renderSections()}\n        </React.Fragment>\n      ,\n        document.querySelector('.page-nav')\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { \n    previousUrl: state.general.previousUrl\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n})(PageNav);"]},"metadata":{},"sourceType":"module"}