{"ast":null,"code":"var _jsxFileName = \"/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setPreviousUrl, setScrollPercent, setIsMobile } from '../../actions';\nimport { capitalize } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PageNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateActiveScaleRange = () => {\n      if (this.props.isMobile) {\n        PageNav.activeScaleRange.min = PageNav.activeScaleRange.mobile.min;\n        PageNav.activeScaleRange.max = PageNav.activeScaleRange.mobile.max;\n      } else {\n        PageNav.activeScaleRange.min = PageNav.activeScaleRange.desktop.min;\n        PageNav.activeScaleRange.max = PageNav.activeScaleRange.desktop.max;\n      }\n    };\n\n    this.getLinearGradient = percent => {\n      const valueRange = {\n        min: .5,\n        max: 1\n      };\n      const percentToUse = valueRange.min + (valueRange.max - valueRange.min) * (percent / 100);\n      return `\n      linear-gradient(to right, \n        rgba(${PageNav.progressColor}, ${percentToUse}) 0%, \n        rgba(${PageNav.progressColor}, ${percentToUse}) ${percent}%,\n        ${PageNav.mainColor} ${percent}%,\n        ${PageNav.mainColor} 100%)`;\n    };\n\n    this.handleScroll = e => {\n      const scrollY = window.scrollY;\n      const maxScrollY = document.body.scrollHeight - window.innerHeight;\n      const isEnd = scrollY >= maxScrollY;\n      const boundingRects = [];\n      const sections = document.querySelectorAll('[data-section]');\n      let currentSection = null;\n      let indexOfCurrentSection = -1;\n      let percentThroughSection = '';\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const boundingRect = section.getBoundingClientRect();\n        boundingRects.push(boundingRect);\n        indexOfCurrentSection = i - 1;\n\n        if (boundingRect.top > 1) {\n          if (i === 0) {\n            currentSection = null;\n          } else {\n            currentSection = sections[indexOfCurrentSection];\n          }\n\n          const boundingRectToUse = boundingRects[i === 0 ? 0 : indexOfCurrentSection];\n          percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom)) * 100;\n          break;\n        }\n      }\n\n      this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection);\n    };\n\n    this.setGradientPercent = (sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection) => {\n      const selectedGradient = this.getLinearGradient(percentThroughSection);\n      const isEndGradient = this.getLinearGradient(100);\n      const normalGradient = this.getLinearGradient(0);\n\n      for (let i = 0; i < sections.length; i++) {\n        var _pageNavSectionElemen3, _pageNavSectionElemen4;\n\n        let gradientToUse = selectedGradient;\n        let shouldAddActiveClass = true;\n        const section = sections[i];\n        const pageNavSectionName = capitalize(section.dataset.section);\n        const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`);\n        const shouldSetEnd = isEnd && i >= indexOfCurrentSection;\n\n        if (shouldSetEnd) {\n          gradientToUse = isEndGradient;\n        } else if (!(currentSection === null || currentSection === void 0 ? void 0 : currentSection.className.match(new RegExp(pageNavSectionName, 'ig')))) {\n          gradientToUse = normalGradient;\n          shouldAddActiveClass = false;\n        }\n\n        pageNavSectionElement.style.backgroundImage = gradientToUse;\n\n        if (shouldAddActiveClass) {\n          var _pageNavSectionElemen, _pageNavSectionElemen2;\n\n          (_pageNavSectionElemen = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen === void 0 ? void 0 : (_pageNavSectionElemen2 = _pageNavSectionElemen.classList) === null || _pageNavSectionElemen2 === void 0 ? void 0 : _pageNavSectionElemen2.add(PageNav.selectedClass);\n          let amountToScale = PageNav.activeScaleRange.max;\n\n          if (!shouldSetEnd) {\n            amountToScale = PageNav.activeScaleRange.min + (PageNav.activeScaleRange.max - PageNav.activeScaleRange.min) * percentThroughSection / 100;\n          }\n\n          const newValue = `${PageNav.activeScaleVarName}: ${amountToScale}`;\n          document.documentElement.style.cssText += newValue;\n        } else (_pageNavSectionElemen3 = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen3 === void 0 ? void 0 : (_pageNavSectionElemen4 = _pageNavSectionElemen3.classList) === null || _pageNavSectionElemen4 === void 0 ? void 0 : _pageNavSectionElemen4.remove(PageNav.selectedClass);\n      }\n    };\n\n    this.renderSections = () => {\n      var _this$props$match;\n\n      const {\n        previousUrl\n      } = this.props;\n      const currentUrl = (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.url;\n      if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n      let sectionNames = [];\n      const sections = document.querySelectorAll('[data-section]');\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const capitalized = capitalize(section.dataset.section);\n        sectionNames.push(capitalized);\n      }\n\n      return sectionNames.map((sectionName, index, array) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${PageNav.cssClass}__section-group`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `${this.props.match.url}#${sectionName === null || sectionName === void 0 ? void 0 : sectionName.toLowerCase()}`,\n            className: `${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`,\n            children: sectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 11\n          }, this)\n        }, sectionName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this);\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n    this.updateActiveScaleRange();\n    let docStyle = getComputedStyle(document.documentElement);\n    const mobileBreakPointWidth = docStyle.getPropertyValue('--nav-switch-width');\n    setIsMobile(window.innerWidth <= mobileBreakPointWidth); //setup window resize listener\n\n    const windowResize = e => {\n      console.log('resize------------------------------------------------');\n\n      if (window.innerWidth <= mobileBreakPointWidth && !this.props.isMobile) {\n        setIsMobile(true);\n      } else if (window.innerWidth > mobileBreakPointWidth && this.props.isMobile) {\n        setIsMobile(false);\n      }\n    };\n\n    window.addEventListener('resize', windowResize);\n  }\n\n  componentDidUpdate() {\n    this.updateActiveScaleRange();\n  }\n\n  render() {\n    console.log('this.props.isMobile =', this.props.isMobile);\n    return /*#__PURE__*/ReactDOM.createPortal(\n    /*#__PURE__*/\n    //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"heading--six page-nav__title\",\n        children: [PageNav.mapUrlToString[this.props.match.url], \"\\xA0 Sections:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), this.props.isMobile ? this.renderSections() : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-nav__sections\",\n        children: this.renderSections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"heading--six page-nav__title page-nav__title-end\",\n        children: [PageNav.mapUrlToString[this.props.match.url], \"\\xA0 Sections:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), document.querySelector('.page-nav'));\n  }\n\n}\n\nPageNav.cssClass = 'page-nav';\nPageNav.gradientVarName = '--site-nav-linear-gradient';\nPageNav.activeScaleVarName = '--site-nav-active-scale-amount';\nPageNav.activeScaleRange = {\n  desktop: {\n    min: 1.5,\n    max: 1.75\n  },\n  mobile: {\n    min: 1.25,\n    max: 1.5\n  },\n  min: 1.5,\n  max: 1.75\n};\nPageNav.mainColor = '#fbeeac';\nPageNav.progressColor = '138, 196, 208';\nPageNav.progressPercent = '0%';\nPageNav.selectedClass = 'page-nav--active';\nPageNav.mapUrlToString = {\n  '/resume': 'Resume'\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    previousUrl: state.general.previousUrl,\n    isMobile: state.general.isMobile\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent,\n  setIsMobile\n})(PageNav);","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js"],"names":["React","ReactDOM","connect","Link","setPreviousUrl","setScrollPercent","setIsMobile","capitalize","PageNav","Component","updateActiveScaleRange","props","isMobile","activeScaleRange","min","mobile","max","desktop","getLinearGradient","percent","valueRange","percentToUse","progressColor","mainColor","handleScroll","e","scrollY","window","maxScrollY","document","body","scrollHeight","innerHeight","isEnd","boundingRects","sections","querySelectorAll","currentSection","indexOfCurrentSection","percentThroughSection","i","length","section","boundingRect","getBoundingClientRect","push","top","boundingRectToUse","Math","abs","bottom","setGradientPercent","selectedGradient","isEndGradient","normalGradient","gradientToUse","shouldAddActiveClass","pageNavSectionName","dataset","pageNavSectionElement","querySelector","shouldSetEnd","className","match","RegExp","style","backgroundImage","parentNode","classList","add","selectedClass","amountToScale","newValue","activeScaleVarName","documentElement","cssText","remove","renderSections","previousUrl","currentUrl","url","sectionNames","capitalized","map","sectionName","index","array","cssClass","toLowerCase","componentDidMount","addEventListener","docStyle","getComputedStyle","mobileBreakPointWidth","getPropertyValue","innerWidth","windowResize","console","log","componentDidUpdate","render","createPortal","mapUrlToString","gradientVarName","progressPercent","mapStateToProps","state","ownProps","general"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { setPreviousUrl, setScrollPercent, setIsMobile} from '../../actions';\nimport { capitalize } from '../../helpers';\n\nclass PageNav extends React.Component {\n  static cssClass = 'page-nav';\n  static gradientVarName = '--site-nav-linear-gradient';\n  static activeScaleVarName = '--site-nav-active-scale-amount';\n  static activeScaleRange = {\n    desktop: {min: 1.5, max: 1.75},\n    mobile: {min: 1.25, max: 1.5},\n    min: 1.5,\n    max: 1.75,\n  };\n  static mainColor = '#fbeeac';\n  static progressColor = '138, 196, 208';\n  static progressPercent = '0%';\n  static selectedClass = 'page-nav--active';\n  static mapUrlToString = {\n    '/resume': 'Resume',\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n    this.updateActiveScaleRange();\n\n    let docStyle = getComputedStyle(document.documentElement);\n\t\tconst mobileBreakPointWidth = docStyle.getPropertyValue('--nav-switch-width')\n\t\tsetIsMobile(window.innerWidth <= mobileBreakPointWidth);\n  \n  \t//setup window resize listener\n    const windowResize = (e) => {\n\t\t\tconsole.log('resize------------------------------------------------');\n      if (window.innerWidth <= mobileBreakPointWidth && !this.props.isMobile){\n        setIsMobile(true);\n      }\n      else if (window.innerWidth > mobileBreakPointWidth && this.props.isMobile){\n        setIsMobile(false);\n      }\n    }\n    window.addEventListener('resize', windowResize);\n  }\n\n  componentDidUpdate () {\n    this.updateActiveScaleRange();\n  }\n\n  updateActiveScaleRange = () => {\n    if (this.props.isMobile) {\n      PageNav.activeScaleRange.min = PageNav.activeScaleRange.mobile.min;\n      PageNav.activeScaleRange.max = PageNav.activeScaleRange.mobile.max;\n    } \n    else { \n      PageNav.activeScaleRange.min = PageNav.activeScaleRange.desktop.min;\n      PageNav.activeScaleRange.max = PageNav.activeScaleRange.desktop.max;\n    }\n  }\n\n  getLinearGradient = (percent) => {\n    const valueRange = {\n      min: .5,\n      max: 1,\n    }\n\n    const percentToUse = valueRange.min + ((valueRange.max - valueRange.min) * (percent / 100))\n\n    return `\n      linear-gradient(to right, \n        rgba(${PageNav.progressColor}, ${percentToUse}) 0%, \n        rgba(${PageNav.progressColor}, ${percentToUse}) ${percent}%,\n        ${PageNav.mainColor} ${percent}%,\n        ${PageNav.mainColor} 100%)`\n      ;\n  }\n\n  handleScroll = (e) => {\n    const scrollY = window.scrollY;\n    const maxScrollY = document.body.scrollHeight - window.innerHeight;\n    const isEnd = scrollY >= maxScrollY;\n    const boundingRects = [];\n    const sections = document.querySelectorAll('[data-section]');\n\n    let currentSection = null;\n    let indexOfCurrentSection = -1;\n    let percentThroughSection = '';\n\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const boundingRect = section.getBoundingClientRect();\n      boundingRects.push(boundingRect);\n      indexOfCurrentSection = i - 1;\n\n      if (boundingRect.top > 1) {\n        if (i === 0) { \n          currentSection = null;\n        } else {\n          currentSection = sections[indexOfCurrentSection];\n        }\n        const boundingRectToUse = boundingRects[i === 0 ? 0 : indexOfCurrentSection];\n        percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom))  * 100;\n        break;\n      }\n    }\n    this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection);\n  }\n\n  setGradientPercent = (sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection) => {\n    const selectedGradient = this.getLinearGradient(percentThroughSection);\n    const isEndGradient = this.getLinearGradient(100);\n    const normalGradient = this.getLinearGradient(0);\n    \n    for (let i = 0; i < sections.length; i++) {\n      let gradientToUse = selectedGradient;\n      let shouldAddActiveClass = true;\n      const section = sections[i];\n      const pageNavSectionName = capitalize(section.dataset.section);\n      const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`)\n      const shouldSetEnd = isEnd && i >= indexOfCurrentSection;\n\n\n      if (shouldSetEnd) {\n        gradientToUse = isEndGradient;\n      }\n      else if (!currentSection?.className.match(new RegExp(pageNavSectionName, 'ig'))) {\n        gradientToUse = normalGradient;\n        shouldAddActiveClass = false;\n      }\n\n      pageNavSectionElement.style.backgroundImage = gradientToUse;\n\n      if (shouldAddActiveClass) {\n        pageNavSectionElement.parentNode?.classList?.add(PageNav.selectedClass);\n\n        let amountToScale = PageNav.activeScaleRange.max;\n        if (!shouldSetEnd) {\n          amountToScale = PageNav.activeScaleRange.min + ((PageNav.activeScaleRange.max - PageNav.activeScaleRange.min) * percentThroughSection / 100);\n        }\n\n        const newValue = `${PageNav.activeScaleVarName}: ${amountToScale}`;\n        document.documentElement.style.cssText += newValue;\n\n      }\n      else pageNavSectionElement.parentNode?.classList?.remove(PageNav.selectedClass);\n\n      \n    }\n  }\n\n  renderSections = () => {\n    const { previousUrl } = this.props;\n    const currentUrl = this.props.match?.url;\n\n    if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n\n    let sectionNames = [];\n    const sections = document.querySelectorAll('[data-section]');\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const capitalized = capitalize(section.dataset.section);\n      sectionNames.push(capitalized)\n    }\n    \n    return sectionNames.map((sectionName, index, array) => {\n      return (\n        <li \n          key={sectionName} \n          className={`${PageNav.cssClass}__section-group`}\n        >\n          <a \n            href={`${this.props.match.url}#${sectionName?.toLowerCase()}`} \n            className={`${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`}\n          >\n            {sectionName}\n          </a>\n        </li>\n      );\n    });\n  }\n\n  render() {\n    console.log('this.props.isMobile =', this.props.isMobile);\n    return (\n      ReactDOM.createPortal(\n        //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n        <React.Fragment>\n          <h6 className=\"heading--six page-nav__title\">\n            {PageNav.mapUrlToString[this.props.match.url]}\n            &nbsp;\n            Sections:\n          </h6>\n          \n          {this.props.isMobile ?\n            this.renderSections()\n          :\n            <div className='page-nav__sections'>\n              {this.renderSections()}\n            </div>\n          }\n         \n          <h6 className=\"heading--six page-nav__title page-nav__title-end\">\n            {PageNav.mapUrlToString[this.props.match.url]}\n            &nbsp;\n            Sections:\n          </h6>\n        </React.Fragment>\n      ,\n        document.querySelector('.page-nav')\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { \n    previousUrl: state.general.previousUrl,\n    isMobile: state.general.isMobile,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent,\n  setIsMobile,\n})(PageNav);\n\n"]},"metadata":{},"sourceType":"module"}