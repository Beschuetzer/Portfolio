{"ast":null,"code":"var _jsxFileName = \"/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PageNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateActiveScaleRange = () => {\n      if (this.props.isMobile) {\n        PageNav.activeScaleRange.min = PageNav.activeScaleRange.mobile.min;\n        PageNav.activeScaleRange.max = PageNav.activeScaleRange.mobile.max;\n      } else {\n        PageNav.activeScaleRange.min = PageNav.activeScaleRange.desktop.min;\n        PageNav.activeScaleRange.max = PageNav.activeScaleRange.desktop.max;\n      }\n    };\n\n    this.getLinearGradient = (percent, docStyle) => {\n      const mainColor = docStyle.getPropertyValue('--color-primary-4');\n      const progressColor = docStyle.getPropertyValue('--color-primary-2').trim(); // const valueRange = {\n      //   min: .5,\n      //   max: 1,\n      // }\n      // const percentToUse = valueRange.min + ((valueRange.max - valueRange.min) * (percent / 100))\n\n      return `\n      linear-gradient(to right, \n        ${progressColor.trim()} 0%, \n        ${progressColor.trim()} ${percent}%,\n        ${mainColor} ${percent}%,\n        ${mainColor} 100%)`;\n    };\n\n    this.handleScroll = e => {\n      if (!PageNav.shouldHandleScroll) return;\n      PageNav.shouldHandleScroll = false;\n      const scrollY = window.scrollY;\n      const maxScrollY = document.body.scrollHeight - window.innerHeight;\n      const maxScrollOffset = document.body.scrollHeight * PageNav.maxScrollOffsetPercent / 100;\n      const isEnd = scrollY >= maxScrollY - maxScrollOffset;\n      const boundingRects = [];\n      const sections = document.querySelectorAll('[data-section]');\n      let currentSection = null;\n      let indexOfCurrentSection = -1;\n      let percentThroughSection = '';\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const boundingRect = section.getBoundingClientRect();\n        boundingRects.push(boundingRect);\n        indexOfCurrentSection = i - 1;\n\n        if (boundingRect.top > 1) {\n          if (i === 0) {\n            currentSection = null;\n          } else {\n            currentSection = sections[indexOfCurrentSection];\n          }\n\n          let boundingRectToUse = boundingRects[i < 1 ? 0 : indexOfCurrentSection];\n          let boundingRectNext = boundingRects[i < 1 ? 0 : indexOfCurrentSection + 1];\n\n          if (boundingRectToUse.bottom <= PageNav.scrollSectionDelimiterOffset && i > 0) {\n            currentSection = sections[indexOfCurrentSection + 1]; //TODO: here the percent through section is not correct for the transition \n            // percentThroughSection = Math.abs(boundingRectToUse.bottom - PageNav.scrollSectionDelimiterOffset) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom))  * 100;\n\n            console.log('window.scrollY =', window.scrollY);\n            console.log('boundingRectToUse =', boundingRectToUse);\n            console.log('boundingRectNext =', boundingRectNext);\n            percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom)) * 100;\n            const addedPercent = PageNav.scrollSectionDelimiterOffset / Math.abs(boundingRectNext.bottom - boundingRectNext.top) * 100;\n            if (percentThroughSection >= addedPercent) percentThroughSection = addedPercent;\n          } else {\n            const addedPercent = PageNav.scrollSectionDelimiterOffset / Math.abs(boundingRectToUse.bottom - boundingRectToUse.top) * 100;\n            percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom)) * 100;\n            percentThroughSection += addedPercent;\n          }\n\n          break; // console.log('percentThroughSection =', percentThroughSection);\n        }\n      }\n\n      this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection);\n      setTimeout(() => {\n        PageNav.shouldHandleScroll = true;\n      }, PageNav.scrollRefreshLimit);\n    };\n\n    this.setGradientPercent = (sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection) => {\n      let docStyle = getComputedStyle(document.documentElement);\n      const selectedGradient = this.getLinearGradient(percentThroughSection, docStyle);\n      const isEndGradient = this.getLinearGradient(100, docStyle);\n      const normalGradient = this.getLinearGradient(0, docStyle);\n\n      for (let i = 0; i < sections.length; i++) {\n        var _pageNavSectionElemen3, _pageNavSectionElemen4;\n\n        let gradientToUse = selectedGradient;\n        let shouldAddActiveClass = true;\n        const section = sections[i];\n        const pageNavSectionName = capitalize(section.dataset.section);\n        const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`);\n        const shouldSetEnd = isEnd && i >= indexOfCurrentSection;\n\n        if (shouldSetEnd) {\n          gradientToUse = isEndGradient;\n        } else if (!(currentSection === null || currentSection === void 0 ? void 0 : currentSection.className.match(new RegExp(pageNavSectionName, 'ig')))) {\n          gradientToUse = normalGradient;\n          shouldAddActiveClass = false;\n        }\n\n        pageNavSectionElement.style.backgroundImage = gradientToUse;\n\n        if (shouldAddActiveClass) {\n          var _pageNavSectionElemen, _pageNavSectionElemen2;\n\n          (_pageNavSectionElemen = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen === void 0 ? void 0 : (_pageNavSectionElemen2 = _pageNavSectionElemen.classList) === null || _pageNavSectionElemen2 === void 0 ? void 0 : _pageNavSectionElemen2.add(PageNav.selectedClass);\n          let amountToScale = PageNav.activeScaleRange.max;\n\n          if (!shouldSetEnd) {\n            amountToScale = PageNav.activeScaleRange.min + (PageNav.activeScaleRange.max - PageNav.activeScaleRange.min) * percentThroughSection / 100;\n          }\n\n          const newValue = `${PageNav.activeScaleVarName}: ${amountToScale}`;\n          document.documentElement.style.cssText += newValue;\n        } else (_pageNavSectionElemen3 = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen3 === void 0 ? void 0 : (_pageNavSectionElemen4 = _pageNavSectionElemen3.classList) === null || _pageNavSectionElemen4 === void 0 ? void 0 : _pageNavSectionElemen4.remove(PageNav.selectedClass);\n      }\n    };\n\n    this.renderSections = () => {\n      var _this$props$match;\n\n      const {\n        previousUrl\n      } = this.props;\n      const currentUrl = (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.url;\n      if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n      let sectionNames = [];\n      const sections = document.querySelectorAll('[data-section]');\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const capitalized = capitalize(section.dataset.section);\n        sectionNames.push(capitalized);\n      }\n\n      return sectionNames.map((sectionName, index, array) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${PageNav.cssClass}__section-group`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `${this.props.match.url}#${sectionName === null || sectionName === void 0 ? void 0 : sectionName.toLowerCase()}`,\n            className: `${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`,\n            children: sectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 11\n          }, this)\n        }, sectionName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }, this);\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n    this.updateActiveScaleRange();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.handleScroll);\n  }\n\n  componentDidUpdate() {\n    this.updateActiveScaleRange();\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(\n    /*#__PURE__*/\n    //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n    _jsxDEV(React.Fragment, {\n      children: this.renderSections()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), document.querySelector('.page-nav'));\n  }\n\n}\n\nPageNav.cssClass = 'page-nav';\nPageNav.gradientVarName = '--site-nav-linear-gradient';\nPageNav.activeScaleVarName = '--site-nav-active-scale-amount';\nPageNav.activeScaleRange = {\n  desktop: {\n    min: 1.75,\n    max: 1.5\n  },\n  mobile: {\n    min: 1.25,\n    max: 1.05\n  },\n  min: 1.5,\n  max: 1.75\n};\nPageNav.scrollSectionDelimiterOffset = window.innerHeight / 6;\nPageNav.previousSectionEnd = -1;\nPageNav.scrollRefreshLimit = 50;\nPageNav.maxScrollOffsetPercent = 1;\nPageNav.shouldHandleScroll = true;\nPageNav.progressPercent = '0%';\nPageNav.selectedClass = 'page-nav--active';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    previousUrl: state.general.previousUrl,\n    isMobile: state.general.isMobile\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent\n})(PageNav);","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js"],"names":["React","ReactDOM","connect","Link","setPreviousUrl","setScrollPercent","capitalize","PageNav","Component","updateActiveScaleRange","props","isMobile","activeScaleRange","min","mobile","max","desktop","getLinearGradient","percent","docStyle","mainColor","getPropertyValue","progressColor","trim","handleScroll","e","shouldHandleScroll","scrollY","window","maxScrollY","document","body","scrollHeight","innerHeight","maxScrollOffset","maxScrollOffsetPercent","isEnd","boundingRects","sections","querySelectorAll","currentSection","indexOfCurrentSection","percentThroughSection","i","length","section","boundingRect","getBoundingClientRect","push","top","boundingRectToUse","boundingRectNext","bottom","scrollSectionDelimiterOffset","console","log","Math","abs","addedPercent","setGradientPercent","setTimeout","scrollRefreshLimit","getComputedStyle","documentElement","selectedGradient","isEndGradient","normalGradient","gradientToUse","shouldAddActiveClass","pageNavSectionName","dataset","pageNavSectionElement","querySelector","shouldSetEnd","className","match","RegExp","style","backgroundImage","parentNode","classList","add","selectedClass","amountToScale","newValue","activeScaleVarName","cssText","remove","renderSections","previousUrl","currentUrl","url","sectionNames","capitalized","map","sectionName","index","array","cssClass","toLowerCase","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","render","createPortal","gradientVarName","previousSectionEnd","progressPercent","mapStateToProps","state","ownProps","general"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\n\nclass PageNav extends React.Component {\n  static cssClass = 'page-nav';\n  static gradientVarName = '--site-nav-linear-gradient';\n  static activeScaleVarName = '--site-nav-active-scale-amount';\n  static activeScaleRange = {\n    desktop: {min: 1.75, max: 1.5},\n    mobile: {min: 1.25, max: 1.05},\n    min: 1.5,\n    max: 1.75,\n  };\n\tstatic scrollSectionDelimiterOffset = window.innerHeight / 6;\n\tstatic previousSectionEnd = -1;\n\tstatic scrollRefreshLimit = 50;\n\tstatic maxScrollOffsetPercent = 1;\n\tstatic shouldHandleScroll = true;\n  static progressPercent = '0%';\n  static selectedClass = 'page-nav--active';\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n    this.updateActiveScaleRange();\n  }\n\n\tcomponentWillUnmount() {\n    document.removeEventListener('scroll', this.handleScroll);\n\t}\n\n  componentDidUpdate () {\n    this.updateActiveScaleRange();\n  }\n\n  updateActiveScaleRange = () => {\n    if (this.props.isMobile) {\n      PageNav.activeScaleRange.min = PageNav.activeScaleRange.mobile.min;\n      PageNav.activeScaleRange.max = PageNav.activeScaleRange.mobile.max;\n    } \n    else { \n      PageNav.activeScaleRange.min = PageNav.activeScaleRange.desktop.min;\n      PageNav.activeScaleRange.max = PageNav.activeScaleRange.desktop.max;\n    }\n  }\n\n  getLinearGradient = (percent, docStyle) => {\n\t\tconst mainColor = docStyle.getPropertyValue('--color-primary-4')\n\t\tconst progressColor = docStyle.getPropertyValue('--color-primary-2').trim();\n    \n\t\t// const valueRange = {\n    //   min: .5,\n    //   max: 1,\n    // }\n\n    // const percentToUse = valueRange.min + ((valueRange.max - valueRange.min) * (percent / 100))\n\n    return `\n      linear-gradient(to right, \n        ${progressColor.trim()} 0%, \n        ${progressColor.trim()} ${percent}%,\n        ${mainColor} ${percent}%,\n        ${mainColor} 100%)`\n      ;\n  }\n\n  handleScroll = (e) => {\n\t\tif (!PageNav.shouldHandleScroll) return;\n\t\tPageNav.shouldHandleScroll = false;\n    const scrollY = window.scrollY;\n    const maxScrollY = document.body.scrollHeight - window.innerHeight;\n\t\tconst maxScrollOffset = document.body.scrollHeight * PageNav.maxScrollOffsetPercent / 100;\n    const isEnd = scrollY >= maxScrollY - maxScrollOffset;\n    const boundingRects = [];\n    const sections = document.querySelectorAll('[data-section]');\n\n    let currentSection = null;\n    let indexOfCurrentSection = -1;\n    let percentThroughSection = '';\n\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const boundingRect = section.getBoundingClientRect();\n      boundingRects.push(boundingRect);\n      indexOfCurrentSection = i - 1;\n\n      if (boundingRect.top > 1) {\n        if (i === 0) { \n          currentSection = null;\n        } else {\n          currentSection = sections[indexOfCurrentSection];\n        }\n        let boundingRectToUse = boundingRects[i < 1 ? 0 : indexOfCurrentSection];\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tlet boundingRectNext = boundingRects[i < 1 ? 0 : indexOfCurrentSection + 1]\n\t\t\t\tif (boundingRectToUse.bottom <= PageNav.scrollSectionDelimiterOffset && i > 0) {\n\t\t\t\t\tcurrentSection = sections[indexOfCurrentSection + 1];\n\t\t\t\t\t\n\t\t\t\t\t//TODO: here the percent through section is not correct for the transition \n\t\t\t\t\t// percentThroughSection = Math.abs(boundingRectToUse.bottom - PageNav.scrollSectionDelimiterOffset) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom))  * 100;\n\n\t\t\t\t\tconsole.log('window.scrollY =', window.scrollY);\n\t\t\t\t\tconsole.log('boundingRectToUse =', boundingRectToUse);\n\t\t\t\t\tconsole.log('boundingRectNext =', boundingRectNext);\n\n\t\t\t\t\tpercentThroughSection = ( Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom))  * 100);\n\n\t\t\t\t\tconst addedPercent = PageNav.scrollSectionDelimiterOffset / Math.abs(boundingRectNext.bottom - boundingRectNext.top) * 100;\n\n\t\t\t\t\tif (percentThroughSection >= addedPercent)  percentThroughSection = addedPercent;\n\n\t\t\t\t} else {\n\t\t\t\t\tconst addedPercent = PageNav.scrollSectionDelimiterOffset / Math.abs(boundingRectToUse.bottom - boundingRectToUse.top) * 100;\n\n\t\t\t\t\tpercentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom))  * 100;\n\n\t\t\t\t\tpercentThroughSection += addedPercent;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t// console.log('percentThroughSection =', percentThroughSection);\n      }\n    }\n    this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection);\n\t\tsetTimeout(() => {\n\t\t\tPageNav.shouldHandleScroll = true;\n\t\t}, PageNav.scrollRefreshLimit);\n  }\n\n  setGradientPercent = (sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection) => {\n\t\tlet docStyle = getComputedStyle(document.documentElement);\n    const selectedGradient = this.getLinearGradient(percentThroughSection, docStyle);\n    const isEndGradient = this.getLinearGradient(100, docStyle);\n    const normalGradient = this.getLinearGradient(0, docStyle);\n    \n    for (let i = 0; i < sections.length; i++) {\n      let gradientToUse = selectedGradient;\n      let shouldAddActiveClass = true;\n      const section = sections[i];\n      const pageNavSectionName = capitalize(section.dataset.section);\n      const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`)\n      const shouldSetEnd = isEnd && i >= indexOfCurrentSection;\n\n\n      if (shouldSetEnd) {\n        gradientToUse = isEndGradient;\n      }\n      else if (!currentSection?.className.match(new RegExp(pageNavSectionName, 'ig'))) {\n        gradientToUse = normalGradient;\n        shouldAddActiveClass = false;\n      }\n\n      pageNavSectionElement.style.backgroundImage = gradientToUse;\n\n      if (shouldAddActiveClass) {\n        pageNavSectionElement.parentNode?.classList?.add(PageNav.selectedClass);\n\n        let amountToScale = PageNav.activeScaleRange.max;\n        if (!shouldSetEnd) {\n          amountToScale = PageNav.activeScaleRange.min + ((PageNav.activeScaleRange.max - PageNav.activeScaleRange.min) * percentThroughSection / 100);\n        }\n\n        const newValue = `${PageNav.activeScaleVarName}: ${amountToScale}`;\n        document.documentElement.style.cssText += newValue;\n\n      }\n      else pageNavSectionElement.parentNode?.classList?.remove(PageNav.selectedClass);\n\n      \n    }\n  }\n\n  renderSections = () => {\n    const { previousUrl } = this.props;\n    const currentUrl = this.props.match?.url;\n\n    if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n\n    let sectionNames = [];\n    const sections = document.querySelectorAll('[data-section]');\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const capitalized = capitalize(section.dataset.section);\n      sectionNames.push(capitalized)\n    }\n    \n    return sectionNames.map((sectionName, index, array) => {\n      return (\n        <li \n          key={sectionName} \n          className={`${PageNav.cssClass}__section-group`}\n        >\n          <a \n            href={`${this.props.match.url}#${sectionName?.toLowerCase()}`} \n            className={`${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`}\n          >\n            {sectionName}\n          </a>\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      ReactDOM.createPortal(\n        //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n        <React.Fragment>\n          {this.renderSections()}\n        </React.Fragment>\n      ,\n        document.querySelector('.page-nav')\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { \n    previousUrl: state.general.previousUrl,\n    isMobile: state.general.isMobile,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent,\n})(PageNav);"]},"metadata":{},"sourceType":"module"}