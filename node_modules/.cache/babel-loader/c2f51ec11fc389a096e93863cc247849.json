{"ast":null,"code":"var _jsxFileName = \"/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { setPreviousUrl, setScrollPercent } from \"../../actions\";\nimport { capitalize } from \"../../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PageNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateActiveScaleRange = () => {\n      if (this.props.isMobile) {\n        PageNav.activeScaleRange.min = PageNav.activeScaleRange.mobile.min;\n        PageNav.activeScaleRange.max = PageNav.activeScaleRange.mobile.max;\n      } else {\n        PageNav.activeScaleRange.min = PageNav.activeScaleRange.desktop.min;\n        PageNav.activeScaleRange.max = PageNav.activeScaleRange.desktop.max;\n      }\n    };\n\n    this.getLinearGradient = (percent, docStyle) => {\n      const mainColor = docStyle.getPropertyValue('--color-primary-1');\n      const progressColor = docStyle.getPropertyValue('--color-primary-2');\n      const valueRange = {\n        min: 0.5,\n        max: 1\n      };\n      const percentToUse = valueRange.min + (valueRange.max - valueRange.min) * (percent / 100);\n      return `\n      linear-gradient(to right, \n        alpha(${progressColor}, ${percentToUse}) 0%, \n        alpha(${progressColor}, ${percentToUse}) ${percent}%,\n        ${mainColor} ${percent}%,\n        ${mainColor} 100%)`;\n    };\n\n    this.handleScroll = e => {\n      const scrollY = window.scrollY;\n      const maxScrollY = document.body.scrollHeight - window.innerHeight;\n      const isEnd = scrollY >= maxScrollY;\n      const boundingRects = [];\n      const sections = document.querySelectorAll(\"[data-section]\");\n      let currentSection = null;\n      let indexOfCurrentSection = -1;\n      let percentThroughSection = \"\";\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const boundingRect = section.getBoundingClientRect();\n        boundingRects.push(boundingRect);\n        indexOfCurrentSection = i - 1;\n\n        if (boundingRect.top > 1) {\n          if (i === 0) {\n            currentSection = null;\n          } else {\n            currentSection = sections[indexOfCurrentSection];\n          }\n\n          const boundingRectToUse = boundingRects[i === 0 ? 0 : indexOfCurrentSection];\n          percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom)) * 100;\n          break;\n        }\n      }\n\n      this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection);\n    };\n\n    this.setGradientPercent = (sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection) => {\n      let docStyle = getComputedStyle(document.documentElement);\n      const selectedGradient = this.getLinearGradient(percentThroughSection, docStyle);\n      const isEndGradient = this.getLinearGradient(100, docStyle);\n      const normalGradient = this.getLinearGradient(0, docStyle);\n      debugger;\n\n      for (let i = 0; i < sections.length; i++) {\n        var _pageNavSectionElemen3, _pageNavSectionElemen4;\n\n        let gradientToUse = selectedGradient;\n        let shouldAddActiveClass = true;\n        const section = sections[i];\n        const pageNavSectionName = capitalize(section.dataset.section);\n        const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`);\n        const shouldSetEnd = isEnd && i >= indexOfCurrentSection;\n\n        if (shouldSetEnd) {\n          gradientToUse = isEndGradient;\n        } else if (!(currentSection === null || currentSection === void 0 ? void 0 : currentSection.className.match(new RegExp(pageNavSectionName, \"ig\")))) {\n          gradientToUse = normalGradient;\n          shouldAddActiveClass = false;\n        }\n\n        pageNavSectionElement.style.backgroundImage = gradientToUse; // const newValue = `--site-nav-linear-gradient: ${gradientToUse}`;\n        // document.documentElement.style.cssText += newValue;\n\n        if (shouldAddActiveClass) {\n          var _pageNavSectionElemen, _pageNavSectionElemen2;\n\n          (_pageNavSectionElemen = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen === void 0 ? void 0 : (_pageNavSectionElemen2 = _pageNavSectionElemen.classList) === null || _pageNavSectionElemen2 === void 0 ? void 0 : _pageNavSectionElemen2.add(PageNav.selectedClass);\n          let amountToScale = PageNav.activeScaleRange.max;\n\n          if (!shouldSetEnd) {\n            amountToScale = PageNav.activeScaleRange.min + (PageNav.activeScaleRange.max - PageNav.activeScaleRange.min) * percentThroughSection / 100;\n          }\n\n          const newValue = `${PageNav.activeScaleVarName}: ${amountToScale}`;\n          document.documentElement.style.cssText += newValue;\n        } else (_pageNavSectionElemen3 = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen3 === void 0 ? void 0 : (_pageNavSectionElemen4 = _pageNavSectionElemen3.classList) === null || _pageNavSectionElemen4 === void 0 ? void 0 : _pageNavSectionElemen4.remove(PageNav.selectedClass);\n      }\n    };\n\n    this.renderSections = () => {\n      var _this$props$match;\n\n      const {\n        previousUrl\n      } = this.props;\n      const currentUrl = (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.url;\n      if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n      let sectionNames = [];\n      const sections = document.querySelectorAll(\"[data-section]\");\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const capitalized = capitalize(section.dataset.section);\n        sectionNames.push(capitalized);\n      }\n\n      return sectionNames.map((sectionName, index, array) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${PageNav.cssClass}__section-group`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `${this.props.match.url}#${sectionName === null || sectionName === void 0 ? void 0 : sectionName.toLowerCase()}`,\n            className: `${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`,\n            children: sectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 6\n          }, this)\n        }, sectionName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 5\n        }, this);\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"scroll\", this.handleScroll);\n    this.updateActiveScaleRange();\n  }\n\n  componentDidUpdate() {\n    this.updateActiveScaleRange();\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(\n    /*#__PURE__*/\n    //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n    _jsxDEV(React.Fragment, {\n      children: this.renderSections()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 4\n    }, this), document.querySelector(\".page-nav\"));\n  }\n\n}\n\nPageNav.cssClass = \"page-nav\";\nPageNav.gradientVarName = \"--site-nav-linear-gradient\";\nPageNav.activeScaleVarName = \"--site-nav-active-scale-amount\";\nPageNav.activeScaleRange = {\n  desktop: {\n    min: 1.5,\n    max: 1.75\n  },\n  mobile: {\n    min: 1.05,\n    max: 1.25\n  },\n  min: 1.5,\n  max: 1.75\n};\nPageNav.selectedClass = \"page-nav--active\";\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    previousUrl: state.general.previousUrl,\n    isMobile: state.general.isMobile\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent\n})(PageNav);","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js"],"names":["React","ReactDOM","connect","Link","setPreviousUrl","setScrollPercent","capitalize","PageNav","Component","updateActiveScaleRange","props","isMobile","activeScaleRange","min","mobile","max","desktop","getLinearGradient","percent","docStyle","mainColor","getPropertyValue","progressColor","valueRange","percentToUse","handleScroll","e","scrollY","window","maxScrollY","document","body","scrollHeight","innerHeight","isEnd","boundingRects","sections","querySelectorAll","currentSection","indexOfCurrentSection","percentThroughSection","i","length","section","boundingRect","getBoundingClientRect","push","top","boundingRectToUse","Math","abs","bottom","setGradientPercent","getComputedStyle","documentElement","selectedGradient","isEndGradient","normalGradient","gradientToUse","shouldAddActiveClass","pageNavSectionName","dataset","pageNavSectionElement","querySelector","shouldSetEnd","className","match","RegExp","style","backgroundImage","parentNode","classList","add","selectedClass","amountToScale","newValue","activeScaleVarName","cssText","remove","renderSections","previousUrl","currentUrl","url","sectionNames","capitalized","map","sectionName","index","array","cssClass","toLowerCase","componentDidMount","addEventListener","componentDidUpdate","render","createPortal","gradientVarName","mapStateToProps","state","ownProps","general"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { setPreviousUrl, setScrollPercent } from \"../../actions\";\nimport { capitalize } from \"../../helpers\";\n\nclass PageNav extends React.Component {\n\tstatic cssClass = \"page-nav\";\n\tstatic gradientVarName = \"--site-nav-linear-gradient\";\n\tstatic activeScaleVarName = \"--site-nav-active-scale-amount\";\n\tstatic activeScaleRange = {\n\t\tdesktop: { min: 1.5, max: 1.75 },\n\t\tmobile: { min: 1.05, max: 1.25 },\n\t\tmin: 1.5,\n\t\tmax: 1.75,\n\t};\n\tstatic selectedClass = \"page-nav--active\";\n\n\tcomponentDidMount() {\n\t\tdocument.addEventListener(\"scroll\", this.handleScroll);\n\t\tthis.updateActiveScaleRange();\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.updateActiveScaleRange();\n\t}\n\n\tupdateActiveScaleRange = () => {\n\t\tif (this.props.isMobile) {\n\t\t\tPageNav.activeScaleRange.min = PageNav.activeScaleRange.mobile.min;\n\t\t\tPageNav.activeScaleRange.max = PageNav.activeScaleRange.mobile.max;\n\t\t} else {\n\t\t\tPageNav.activeScaleRange.min = PageNav.activeScaleRange.desktop.min;\n\t\t\tPageNav.activeScaleRange.max = PageNav.activeScaleRange.desktop.max;\n\t\t}\n\t};\n\n\tgetLinearGradient = (percent, docStyle) => {\n\t\tconst mainColor = docStyle.getPropertyValue('--color-primary-1');\n\t\tconst progressColor = docStyle.getPropertyValue('--color-primary-2')\n\t\tconst valueRange = {\n\t\t\tmin: 0.5,\n\t\t\tmax: 1,\n\t\t};\n\n\t\tconst percentToUse =\n\t\t\tvalueRange.min + (valueRange.max - valueRange.min) * (percent / 100);\n\n\t\treturn `\n      linear-gradient(to right, \n        alpha(${progressColor}, ${percentToUse}) 0%, \n        alpha(${progressColor}, ${percentToUse}) ${percent}%,\n        ${mainColor} ${percent}%,\n        ${mainColor} 100%)`;\n\t};\n\n\thandleScroll = (e) => {\n\t\tconst scrollY = window.scrollY;\n\t\tconst maxScrollY = document.body.scrollHeight - window.innerHeight;\n\t\tconst isEnd = scrollY >= maxScrollY;\n\t\tconst boundingRects = [];\n\t\tconst sections = document.querySelectorAll(\"[data-section]\");\n\n\t\tlet currentSection = null;\n\t\tlet indexOfCurrentSection = -1;\n\t\tlet percentThroughSection = \"\";\n\n\t\tfor (let i = 0; i < sections.length; i++) {\n\t\t\tconst section = sections[i];\n\t\t\tconst boundingRect = section.getBoundingClientRect();\n\t\t\tboundingRects.push(boundingRect);\n\t\t\tindexOfCurrentSection = i - 1;\n\n\t\t\tif (boundingRect.top > 1) {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tcurrentSection = null;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentSection = sections[indexOfCurrentSection];\n\t\t\t\t}\n\t\t\t\tconst boundingRectToUse =\n\t\t\t\t\tboundingRects[i === 0 ? 0 : indexOfCurrentSection];\n\t\t\t\tpercentThroughSection =\n\t\t\t\t\t(Math.abs(boundingRectToUse.top) /\n\t\t\t\t\t\t(Math.abs(boundingRectToUse.top) +\n\t\t\t\t\t\t\tMath.abs(boundingRectToUse.bottom))) *\n\t\t\t\t\t100;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.setGradientPercent(\n\t\t\tsections,\n\t\t\tcurrentSection,\n\t\t\tpercentThroughSection,\n\t\t\tisEnd,\n\t\t\tindexOfCurrentSection,\n\t\t);\n\t};\n\n\tsetGradientPercent = (\n\t\tsections,\n\t\tcurrentSection,\n\t\tpercentThroughSection,\n\t\tisEnd,\n\t\tindexOfCurrentSection,\n\t) => {\n\t\tlet docStyle = getComputedStyle(document.documentElement);\n\n\t\tconst selectedGradient = this.getLinearGradient(percentThroughSection, docStyle);\n\t\tconst isEndGradient = this.getLinearGradient(100, docStyle);\n\t\tconst normalGradient = this.getLinearGradient(0, docStyle);\n\n\t\tdebugger\n\n\t\tfor (let i = 0; i < sections.length; i++) {\n\t\t\tlet gradientToUse = selectedGradient;\n\t\t\tlet shouldAddActiveClass = true;\n\t\t\tconst section = sections[i];\n\t\t\tconst pageNavSectionName = capitalize(section.dataset.section);\n\t\t\tconst pageNavSectionElement = document.querySelector(\n\t\t\t\t`.page-nav__section-${pageNavSectionName}`,\n\t\t\t);\n\t\t\tconst shouldSetEnd = isEnd && i >= indexOfCurrentSection;\n\n\t\t\tif (shouldSetEnd) {\n\t\t\t\tgradientToUse = isEndGradient;\n\t\t\t} else if (\n\t\t\t\t!currentSection?.className.match(new RegExp(pageNavSectionName, \"ig\"))\n\t\t\t) {\n\t\t\t\tgradientToUse = normalGradient;\n\t\t\t\tshouldAddActiveClass = false;\n\t\t\t}\n\n\t\t\t\n\t\t\tpageNavSectionElement.style.backgroundImage = gradientToUse;\n\t\t\t// const newValue = `--site-nav-linear-gradient: ${gradientToUse}`;\n\t\t\t\t// document.documentElement.style.cssText += newValue;\n\n\t\t\tif (shouldAddActiveClass) {\n\t\t\t\tpageNavSectionElement.parentNode?.classList?.add(PageNav.selectedClass);\n\n\t\t\t\tlet amountToScale = PageNav.activeScaleRange.max;\n\t\t\t\tif (!shouldSetEnd) {\n\t\t\t\t\tamountToScale =\n\t\t\t\t\t\tPageNav.activeScaleRange.min +\n\t\t\t\t\t\t((PageNav.activeScaleRange.max - PageNav.activeScaleRange.min) *\n\t\t\t\t\t\t\tpercentThroughSection) /\n\t\t\t\t\t\t\t100;\n\t\t\t\t}\n\n\t\t\t\tconst newValue = `${PageNav.activeScaleVarName}: ${amountToScale}`;\n\t\t\t\tdocument.documentElement.style.cssText += newValue;\n\t\t\t} else\n\t\t\t\tpageNavSectionElement.parentNode?.classList?.remove(\n\t\t\t\t\tPageNav.selectedClass,\n\t\t\t\t);\n\t\t}\n\t};\n\n\trenderSections = () => {\n\t\tconst { previousUrl } = this.props;\n\t\tconst currentUrl = this.props.match?.url;\n\n\t\tif (!previousUrl || previousUrl !== currentUrl)\n\t\t\tthis.props.setPreviousUrl(currentUrl);\n\n\t\tlet sectionNames = [];\n\t\tconst sections = document.querySelectorAll(\"[data-section]\");\n\t\tfor (let i = 0; i < sections.length; i++) {\n\t\t\tconst section = sections[i];\n\t\t\tconst capitalized = capitalize(section.dataset.section);\n\t\t\tsectionNames.push(capitalized);\n\t\t}\n\n\t\treturn sectionNames.map((sectionName, index, array) => {\n\t\t\treturn (\n\t\t\t\t<li key={sectionName} className={`${PageNav.cssClass}__section-group`}>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={`${this.props.match.url}#${sectionName?.toLowerCase()}`}\n\t\t\t\t\t\tclassName={`${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`}>\n\t\t\t\t\t\t{sectionName}\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t};\n\n\trender() {\n\t\treturn ReactDOM.createPortal(\n\t\t\t//The idea behind this component is to have a nav element that has quick links  to the sections of each page\n\t\t\t<React.Fragment>{this.renderSections()}</React.Fragment>,\n\t\t\tdocument.querySelector(\".page-nav\"),\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\treturn {\n\t\tpreviousUrl: state.general.previousUrl,\n\t\tisMobile: state.general.isMobile,\n\t};\n};\n\nexport default connect(mapStateToProps, {\n\tsetPreviousUrl,\n\tsetScrollPercent,\n})(PageNav);\n"]},"metadata":{},"sourceType":"module"}