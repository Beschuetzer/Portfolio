// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// return css color variable with different opacity value
@function alpha($color, $opacity){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// .component {
//   background-color: alpha(var(--color-primary), 0.2); // it works ðŸŽ‰
// }

@mixin defineColorHSL($color, $hue, $saturation, $lightness){
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");#{$color}-h: #{$hue};#{$color}-s: #{$saturation};#{$color}-l: #{$lightness};
}

// :root, [data-theme="default"] {
//   @include defineColorHSL(--color-primary, 220, 89%, 56%);
//   @include defineColorHSL(--color-accent, 355, 90%, 61%);
//   @include defineColorHSL(--color-black, 240, 8%, 12%);
//   @include defineColorHSL(--color-white, 0, 0%, 100%);
//   // color contrasts
//   @include defineColorHSL(--color-bg, 0, 0%, 100%);
//   @include defineColorHSL(--color-contrast-lower, 0, 0%, 95%);
//   @include defineColorHSL(--color-contrast-low, 240, 1%, 83%);
//   @include defineColorHSL(--color-contrast-medium, 240, 1%, 48%);
//   @include defineColorHSL(--color-contrast-high, 240, 4%, 20%);
//   @include defineColorHSL(--color-contrast-higher, 240, 8%, 12%);
// }

// 

@function lighten($color, $lightnessMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

@function darken($color, $multiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * (1 / #{$multiplier})));
}

// .component {
//   background-color: lightness(var(--color-primary), 1.2);
// }

@function saturation($color, $saturationMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, calc(#{$color-s} * #{$saturationMultiplier}), $color-l);
}

// .component {
//   background-color: saturation(var(--color-primary), 1.2);
// }