import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';

export type GeneralSliceState = {
  currentlyViewingImage: string;
  isMobile: boolean | null;
  isSiteNavMinimized: boolean;
  viewPortWidth: number | null;
  repos: any[];
  previousUrl: string | null;
  scrollPercent: string;
  headerHeight: number | null;
}

export const generalSliceInitialState: GeneralSliceState = {
  currentlyViewingImage: '',
  isMobile: null,
  isSiteNavMinimized: false,
  viewPortWidth: null,
  repos: [],
  previousUrl: null,
  scrollPercent: "0%",
  headerHeight: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const generalSlice = createSlice({
  name: 'general',
  initialState: generalSliceInitialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

//#region Selectors
export const currentlyViewingImageSelector = (state: RootState) => state[generalSlice.name].currentlyViewingImage;
export const isMobileSelector = (state: RootState) => state[generalSlice.name].isMobile;
export const isSiteNavMinimizedSelector = (state: RootState) => state[generalSlice.name].isSiteNavMinimized;
export const viewPortWidthSelector = (state: RootState) => state[generalSlice.name].viewPortWidth;
export const reposSelector = (state: RootState) => state[generalSlice.name].repos;
export const previousUrlSelector = (state: RootState) => state[generalSlice.name].previousUrl;
export const scrollPercentSelector = (state: RootState) => state[generalSlice.name].scrollPercent;
export const headerHeightSelector = (state: RootState) => state[generalSlice.name].headerHeight;
//#endregion

//exporting actions
export const {  } = generalSlice.actions;
