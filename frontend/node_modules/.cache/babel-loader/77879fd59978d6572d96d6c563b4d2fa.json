{"ast":null,"code":"var _jsxFileName = \"/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PageNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleScroll = e => {\n      const scrollY = window.scrollY;\n      const maxScrollY = document.body.scrollHeight - window.innerHeight;\n      const isEnd = scrollY >= maxScrollY; //get the binding rects for each section\n\n      let currentSection = null;\n      let percentThroughSection = '';\n      const boundingRects = [];\n      const sections = document.querySelectorAll('[data-section]');\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const boundingRect = section.getBoundingClientRect();\n        boundingRects.push(boundingRect);\n\n        if (boundingRect.top >= 0) {\n          if (i === 0) {\n            currentSection = sections[0];\n          } else {\n            currentSection = sections[indexOfCurrentSec];\n          }\n\n          const boundingRectToUse = boundingRects[i === 0 ? 0 : indexOfCurrentSec];\n          percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom)) * 100;\n          break;\n        }\n      }\n\n      this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd);\n    };\n\n    this.setGradientPercent = (sections, currentSection, percentThroughSection, isEnd) => {\n      const selectedGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${percentThroughSection}%,\n        ${PageNav.mainColor} ${percentThroughSection}%,\n        ${PageNav.mainColor} 100%)`;\n      const normalGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} 0%,\n        ${PageNav.mainColor} 0%,\n        ${PageNav.mainColor} 100%)`;\n\n      for (let i = 0; i < sections.length; i++) {\n        let gradientToUse = selectedGradient;\n        const section = sections[i];\n        const pageNavSectionName = capitalize(section.dataset.section);\n        const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`);\n\n        if (!currentSection.className.match(new RegExp(pageNavSectionName, 'ig'))) {\n          gradientToUse = normalGradient;\n        }\n\n        pageNavSectionElement.style.backgroundImage = gradientToUse;\n      }\n    };\n\n    this.renderSections = () => {\n      var _this$props$match;\n\n      const {\n        previousUrl\n      } = this.props;\n      const currentUrl = (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.url;\n      if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n      let sectionNames = [];\n      const sections = document.querySelectorAll('[data-section]');\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const capitalized = capitalize(section.dataset.section);\n        sectionNames.push(capitalized);\n      }\n\n      return sectionNames.map((sectionName, index, array) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${PageNav.cssClass}__section-group`,\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: `${this.props.match.url}#${sectionName === null || sectionName === void 0 ? void 0 : sectionName.toLowerCase()}`,\n            className: `${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`,\n            children: [sectionName, \"\\xA0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), \"\\xA0\"]\n        }, sectionName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this);\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(\n    /*#__PURE__*/\n    //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n    _jsxDEV(React.Fragment, {\n      children: this.renderSections()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), document.querySelector('.page-nav'));\n  }\n\n}\n\nPageNav.cssClass = 'page-nav';\nPageNav.gradientVarName = '--site-nav-linear-gradient';\nPageNav.mainColor = '#f4d160';\nPageNav.progressColor = '#8ac4d0';\nPageNav.progressPercent = '0%';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    previousUrl: state.general.previousUrl\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent\n})(PageNav);","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js"],"names":["React","ReactDOM","connect","Link","setPreviousUrl","setScrollPercent","capitalize","PageNav","Component","handleScroll","e","scrollY","window","maxScrollY","document","body","scrollHeight","innerHeight","isEnd","currentSection","percentThroughSection","boundingRects","sections","querySelectorAll","i","length","section","boundingRect","getBoundingClientRect","push","top","indexOfCurrentSec","boundingRectToUse","Math","abs","bottom","setGradientPercent","selectedGradient","progressColor","mainColor","normalGradient","gradientToUse","pageNavSectionName","dataset","pageNavSectionElement","querySelector","className","match","RegExp","style","backgroundImage","renderSections","previousUrl","props","currentUrl","url","sectionNames","capitalized","map","sectionName","index","array","cssClass","toLowerCase","componentDidMount","addEventListener","render","createPortal","gradientVarName","progressPercent","mapStateToProps","state","ownProps","general"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,eAAjD;AACA,SAASC,UAAT,QAA2B,eAA3B;;;AAEA,MAAMC,OAAN,SAAsBP,KAAK,CAACQ,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAWpCC,YAXoC,GAWpBC,CAAD,IAAO;AACpB,YAAMC,OAAO,GAAGC,MAAM,CAACD,OAAvB;AACA,YAAME,UAAU,GAAGC,QAAQ,CAACC,IAAT,CAAcC,YAAd,GAA6BJ,MAAM,CAACK,WAAvD;AACA,YAAMC,KAAK,GAAGP,OAAO,IAAIE,UAAzB,CAHoB,CAKpB;;AACA,UAAIM,cAAc,GAAG,IAArB;AACA,UAAIC,qBAAqB,GAAG,EAA5B;AACA,YAAMC,aAAa,GAAG,EAAtB;AACA,YAAMC,QAAQ,GAAGR,QAAQ,CAACS,gBAAT,CAA0B,gBAA1B,CAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAME,OAAO,GAAGJ,QAAQ,CAACE,CAAD,CAAxB;AACA,cAAMG,YAAY,GAAGD,OAAO,CAACE,qBAAR,EAArB;AACAP,QAAAA,aAAa,CAACQ,IAAd,CAAmBF,YAAnB;;AAEA,YAAIA,YAAY,CAACG,GAAb,IAAoB,CAAxB,EAA2B;AACzB,cAAIN,CAAC,KAAK,CAAV,EAAa;AACXL,YAAAA,cAAc,GAAGG,QAAQ,CAAC,CAAD,CAAzB;AACD,WAFD,MAEO;AACLH,YAAAA,cAAc,GAAGG,QAAQ,CAACS,iBAAD,CAAzB;AACD;;AACD,gBAAMC,iBAAiB,GAAGX,aAAa,CAACG,CAAC,KAAK,CAAN,GAAU,CAAV,GAAcO,iBAAf,CAAvC;AACAX,UAAAA,qBAAqB,GAAGa,IAAI,CAACC,GAAL,CAASF,iBAAiB,CAACF,GAA3B,KAAmCG,IAAI,CAACC,GAAL,CAASF,iBAAiB,CAACF,GAA3B,IAAkCG,IAAI,CAACC,GAAL,CAASF,iBAAiB,CAACG,MAA3B,CAArE,IAA4G,GAApI;AACA;AACD;AACF;;AACD,WAAKC,kBAAL,CAAwBd,QAAxB,EAAkCH,cAAlC,EAAkDC,qBAAlD,EAAyEF,KAAzE;AACD,KAtCmC;;AAAA,SAwCpCkB,kBAxCoC,GAwCf,CAACd,QAAD,EAAWH,cAAX,EAA2BC,qBAA3B,EAAkDF,KAAlD,KAA4D;AAC/E,YAAMmB,gBAAgB,GAAI;AAC9B;AACA,UAAU9B,OAAO,CAAC+B,aAAc;AAChC,UAAU/B,OAAO,CAAC+B,aAAc,IAAGlB,qBAAsB;AACzD,UAAUb,OAAO,CAACgC,SAAU,IAAGnB,qBAAsB;AACrD,UAAUb,OAAO,CAACgC,SAAU,QALxB;AAQA,YAAMC,cAAc,GAAI;AAC5B;AACA,UAAUjC,OAAO,CAAC+B,aAAc;AAChC,UAAU/B,OAAO,CAAC+B,aAAc;AAChC,UAAU/B,OAAO,CAACgC,SAAU;AAC5B,UAAUhC,OAAO,CAACgC,SAAU,QALxB;;AAQA,WAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAIiB,aAAa,GAAGJ,gBAApB;AACA,cAAMX,OAAO,GAAGJ,QAAQ,CAACE,CAAD,CAAxB;AACA,cAAMkB,kBAAkB,GAAGpC,UAAU,CAACoB,OAAO,CAACiB,OAAR,CAAgBjB,OAAjB,CAArC;AACA,cAAMkB,qBAAqB,GAAG9B,QAAQ,CAAC+B,aAAT,CAAwB,sBAAqBH,kBAAmB,EAAhE,CAA9B;;AAEA,YAAI,CAACvB,cAAc,CAAC2B,SAAf,CAAyBC,KAAzB,CAA+B,IAAIC,MAAJ,CAAWN,kBAAX,EAA+B,IAA/B,CAA/B,CAAL,EAA2E;AACzED,UAAAA,aAAa,GAAGD,cAAhB;AACD;;AAEDI,QAAAA,qBAAqB,CAACK,KAAtB,CAA4BC,eAA5B,GAA8CT,aAA9C;AACD;AACF,KArEmC;;AAAA,SAuEpCU,cAvEoC,GAuEnB,MAAM;AAAA;;AACrB,YAAM;AAAEC,QAAAA;AAAF,UAAkB,KAAKC,KAA7B;AACA,YAAMC,UAAU,wBAAG,KAAKD,KAAL,CAAWN,KAAd,sDAAG,kBAAkBQ,GAArC;AAEA,UAAI,CAACH,WAAD,IAAgBA,WAAW,KAAKE,UAApC,EAAgD,KAAKD,KAAL,CAAWjD,cAAX,CAA0BkD,UAA1B;AAEhD,UAAIE,YAAY,GAAG,EAAnB;AACA,YAAMlC,QAAQ,GAAGR,QAAQ,CAACS,gBAAT,CAA0B,gBAA1B,CAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAME,OAAO,GAAGJ,QAAQ,CAACE,CAAD,CAAxB;AACA,cAAMiC,WAAW,GAAGnD,UAAU,CAACoB,OAAO,CAACiB,OAAR,CAAgBjB,OAAjB,CAA9B;AACA8B,QAAAA,YAAY,CAAC3B,IAAb,CAAkB4B,WAAlB;AACD;;AAED,aAAOD,YAAY,CAACE,GAAb,CAAiB,CAACC,WAAD,EAAcC,KAAd,EAAqBC,KAArB,KAA+B;AACrD,4BACE;AAEE,UAAA,SAAS,EAAG,GAAEtD,OAAO,CAACuD,QAAS,iBAFjC;AAAA,kCAIE;AACE,YAAA,IAAI,EAAG,GAAE,KAAKT,KAAL,CAAWN,KAAX,CAAiBQ,GAAI,IAAGI,WAA3B,aAA2BA,WAA3B,uBAA2BA,WAAW,CAAEI,WAAb,EAA2B,EAD9D;AAEE,YAAA,SAAS,EAAG,GAAExD,OAAO,CAACuD,QAAS,aAAYvD,OAAO,CAACuD,QAAS,aAAYH,WAAY,EAFtF;AAAA,uBAIGA,WAJH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA,WACOA,WADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAoBD,OArBM,CAAP;AAsBD,KA3GmC;AAAA;;AAOpCK,EAAAA,iBAAiB,GAAG;AAClBlD,IAAAA,QAAQ,CAACmD,gBAAT,CAA0B,QAA1B,EAAoC,KAAKxD,YAAzC;AACD;;AAoGDyD,EAAAA,MAAM,GAAG;AACP,wBACEjE,QAAQ,CAACkE,YAAT;AAAA;AACE;AACA,YAAC,KAAD,CAAO,QAAP;AAAA,gBACG,KAAKhB,cAAL;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,EAMErC,QAAQ,CAAC+B,aAAT,CAAuB,WAAvB,CANF,CADF;AAUD;;AAxHmC;;AAAhCtC,O,CACGuD,Q,GAAW,U;AADdvD,O,CAEG6D,e,GAAkB,4B;AAFrB7D,O,CAGGgC,S,GAAY,S;AAHfhC,O,CAIG+B,a,GAAgB,S;AAJnB/B,O,CAKG8D,e,GAAkB,I;;AAsH3B,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AACLpB,IAAAA,WAAW,EAAEmB,KAAK,CAACE,OAAN,CAAcrB;AADtB,GAAP;AAGD,CAJD;;AAMA,eAAelD,OAAO,CAACoE,eAAD,EAAkB;AACtClE,EAAAA,cADsC;AAEtCC,EAAAA;AAFsC,CAAlB,CAAP,CAGZE,OAHY,CAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\n\nclass PageNav extends React.Component {\n  static cssClass = 'page-nav';\n  static gradientVarName = '--site-nav-linear-gradient';\n  static mainColor = '#f4d160';\n  static progressColor = '#8ac4d0';\n  static progressPercent = '0%';\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = (e) => {\n    const scrollY = window.scrollY;\n    const maxScrollY = document.body.scrollHeight - window.innerHeight;\n    const isEnd = scrollY >= maxScrollY;\n\n    //get the binding rects for each section\n    let currentSection = null;\n    let percentThroughSection = '';\n    const boundingRects = [];\n    const sections = document.querySelectorAll('[data-section]');\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const boundingRect = section.getBoundingClientRect();\n      boundingRects.push(boundingRect);\n\n      if (boundingRect.top >= 0) {\n        if (i === 0) { \n          currentSection = sections[0];\n        } else {\n          currentSection = sections[indexOfCurrentSec];\n        }\n        const boundingRectToUse = boundingRects[i === 0 ? 0 : indexOfCurrentSec];\n        percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom))  * 100;\n        break;\n      }\n    }\n    this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd);\n  }\n\n  setGradientPercent = (sections, currentSection, percentThroughSection, isEnd) => {\n    const selectedGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${percentThroughSection}%,\n        ${PageNav.mainColor} ${percentThroughSection}%,\n        ${PageNav.mainColor} 100%)`\n    ;\n\n    const normalGradient = `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} 0%,\n        ${PageNav.mainColor} 0%,\n        ${PageNav.mainColor} 100%)`\n    ;\n    \n    for (let i = 0; i < sections.length; i++) {\n      let gradientToUse = selectedGradient;\n      const section = sections[i];\n      const pageNavSectionName = capitalize(section.dataset.section);\n      const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`)\n\n      if (!currentSection.className.match(new RegExp(pageNavSectionName, 'ig'))) {\n        gradientToUse = normalGradient;\n      }\n      \n      pageNavSectionElement.style.backgroundImage = gradientToUse;\n    }\n  }\n\n  renderSections = () => {\n    const { previousUrl } = this.props;\n    const currentUrl = this.props.match?.url;\n\n    if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n\n    let sectionNames = [];\n    const sections = document.querySelectorAll('[data-section]');\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const capitalized = capitalize(section.dataset.section);\n      sectionNames.push(capitalized)\n    }\n    \n    return sectionNames.map((sectionName, index, array) => {\n      return (\n        <li \n          key={sectionName} \n          className={`${PageNav.cssClass}__section-group`}\n        >\n          <a \n            href={`${this.props.match.url}#${sectionName?.toLowerCase()}`} \n            className={`${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`}\n          >\n            {sectionName}\n            &nbsp;\n          </a>\n          {/* {index < (array.length - 1) ?\n            <span>/</span>\n          : \n            null\n          } */}\n          &nbsp;\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      ReactDOM.createPortal(\n        //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n        <React.Fragment>\n          {this.renderSections()}\n        </React.Fragment>\n      ,\n        document.querySelector('.page-nav')\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { \n    previousUrl: state.general.previousUrl\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent,\n})(PageNav);"]},"metadata":{},"sourceType":"module"}