{"ast":null,"code":"var _jsxFileName = \"/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PageNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getLinearGradient = percent => {\n      return `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${percent}%,\n        ${PageNav.mainColor} ${percent}%,\n        ${PageNav.mainColor} 100%)`;\n    };\n\n    this.handleScroll = e => {\n      const scrollY = window.scrollY;\n      const maxScrollY = document.body.scrollHeight - window.innerHeight;\n      const isEnd = scrollY >= maxScrollY;\n      const boundingRects = [];\n      const sections = document.querySelectorAll('[data-section]');\n      let currentSection = null;\n      let indexOfCurrentSection = -1;\n      let percentThroughSection = '';\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const boundingRect = section.getBoundingClientRect();\n        boundingRects.push(boundingRect);\n        indexOfCurrentSection = i - 1;\n        console.log('i =', i);\n        console.log('boundingRect =', boundingRect);\n\n        if (boundingRect.top >= 0) {\n          if (i === 0) {\n            currentSection = null;\n          } else {\n            currentSection = sections[indexOfCurrentSection];\n          }\n\n          const boundingRectToUse = boundingRects[i === 0 ? 0 : indexOfCurrentSection];\n          percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom)) * 100;\n          break;\n        }\n      }\n\n      this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection);\n    };\n\n    this.setGradientPercent = (sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection) => {\n      const selectedGradient = this.getLinearGradient(percentThroughSection);\n      const isEndGradient = this.getLinearGradient(100);\n      const normalGradient = this.getLinearGradient(0);\n\n      for (let i = 0; i < sections.length; i++) {\n        var _pageNavSectionElemen, _pageNavSectionElemen2, _pageNavSectionElemen3, _pageNavSectionElemen4;\n\n        let gradientToUse = selectedGradient;\n        let shouldAddActiveClass = true;\n        const section = sections[i];\n        const pageNavSectionName = capitalize(section.dataset.section);\n        const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`);\n\n        if (isEnd && i >= indexOfCurrentSection) {\n          gradientToUse = isEndGradient;\n        } else if (!(currentSection === null || currentSection === void 0 ? void 0 : currentSection.className.match(new RegExp(pageNavSectionName, 'ig')))) {\n          gradientToUse = normalGradient;\n          shouldAddActiveClass = false;\n        }\n\n        pageNavSectionElement.style.backgroundImage = gradientToUse;\n        if (shouldAddActiveClass) (_pageNavSectionElemen = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen === void 0 ? void 0 : (_pageNavSectionElemen2 = _pageNavSectionElemen.classList) === null || _pageNavSectionElemen2 === void 0 ? void 0 : _pageNavSectionElemen2.add(PageNav.selectedClass);else (_pageNavSectionElemen3 = pageNavSectionElement.parentNode) === null || _pageNavSectionElemen3 === void 0 ? void 0 : (_pageNavSectionElemen4 = _pageNavSectionElemen3.classList) === null || _pageNavSectionElemen4 === void 0 ? void 0 : _pageNavSectionElemen4.remove(PageNav.selectedClass);\n        const amountToScale = PageNav.activeScaleRange.max - PageNav.activeScaleRange.min;\n        let docStyle = getComputedStyle(document.documentElement);\n        docStyle.setProperty('--my-variable-name', a);\n      }\n    };\n\n    this.renderSections = () => {\n      var _this$props$match;\n\n      const {\n        previousUrl\n      } = this.props;\n      const currentUrl = (_this$props$match = this.props.match) === null || _this$props$match === void 0 ? void 0 : _this$props$match.url;\n      if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n      let sectionNames = [];\n      const sections = document.querySelectorAll('[data-section]');\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const capitalized = capitalize(section.dataset.section);\n        sectionNames.push(capitalized);\n      }\n\n      return sectionNames.map((sectionName, index, array) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${PageNav.cssClass}__section-group`,\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: `${this.props.match.url}#${sectionName === null || sectionName === void 0 ? void 0 : sectionName.toLowerCase()}`,\n            className: `${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`,\n            children: [sectionName, \"\\xA0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this), \"\\xA0\"]\n        }, sectionName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this);\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(\n    /*#__PURE__*/\n    //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n    _jsxDEV(React.Fragment, {\n      children: this.renderSections()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), document.querySelector('.page-nav'));\n  }\n\n}\n\nPageNav.cssClass = 'page-nav';\nPageNav.gradientVarName = '--site-nav-linear-gradient';\nPageNav.activeVarName = '--site-nav-active-scale-amount';\nPageNav.activeScaleRange = {\n  min: 1,\n  max: 1.5\n};\nPageNav.mainColor = '#f4d160';\nPageNav.progressColor = '#8ac4d0';\nPageNav.progressPercent = '0%';\nPageNav.selectedClass = 'page-nav--active';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    previousUrl: state.general.previousUrl\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent\n})(PageNav);","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/components/navbar/PageNav.js"],"names":["React","ReactDOM","connect","Link","setPreviousUrl","setScrollPercent","capitalize","PageNav","Component","getLinearGradient","percent","progressColor","mainColor","handleScroll","e","scrollY","window","maxScrollY","document","body","scrollHeight","innerHeight","isEnd","boundingRects","sections","querySelectorAll","currentSection","indexOfCurrentSection","percentThroughSection","i","length","section","boundingRect","getBoundingClientRect","push","console","log","top","boundingRectToUse","Math","abs","bottom","setGradientPercent","selectedGradient","isEndGradient","normalGradient","gradientToUse","shouldAddActiveClass","pageNavSectionName","dataset","pageNavSectionElement","querySelector","className","match","RegExp","style","backgroundImage","parentNode","classList","add","selectedClass","remove","amountToScale","activeScaleRange","max","min","docStyle","getComputedStyle","documentElement","setProperty","a","renderSections","previousUrl","props","currentUrl","url","sectionNames","capitalized","map","sectionName","index","array","cssClass","toLowerCase","componentDidMount","addEventListener","render","createPortal","gradientVarName","activeVarName","progressPercent","mapStateToProps","state","ownProps","general"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { setPreviousUrl, setScrollPercent } from '../../actions';\nimport { capitalize } from '../../helpers';\n\nclass PageNav extends React.Component {\n  static cssClass = 'page-nav';\n  static gradientVarName = '--site-nav-linear-gradient';\n  static activeVarName = '--site-nav-active-scale-amount';\n  static activeScaleRange = {min: 1, max: 1.5};\n  static mainColor = '#f4d160';\n  static progressColor = '#8ac4d0';\n  static progressPercent = '0%';\n  static selectedClass = 'page-nav--active';\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.handleScroll);\n  }\n\n  getLinearGradient = (percent) => {\n    return `\n      linear-gradient(to right, \n        ${PageNav.progressColor} 0%, \n        ${PageNav.progressColor} ${percent}%,\n        ${PageNav.mainColor} ${percent}%,\n        ${PageNav.mainColor} 100%)`\n      ;\n  }\n\n  handleScroll = (e) => {\n    const scrollY = window.scrollY;\n    const maxScrollY = document.body.scrollHeight - window.innerHeight;\n    const isEnd = scrollY >= maxScrollY;\n    const boundingRects = [];\n    const sections = document.querySelectorAll('[data-section]');\n\n    let currentSection = null;\n    let indexOfCurrentSection = -1;\n    let percentThroughSection = '';\n\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const boundingRect = section.getBoundingClientRect();\n      boundingRects.push(boundingRect);\n      indexOfCurrentSection = i - 1;\n\n      console.log('i =', i);\n      console.log('boundingRect =', boundingRect);\n\n      if (boundingRect.top >= 0) {\n        if (i === 0) { \n          currentSection = null;\n        } else {\n          currentSection = sections[indexOfCurrentSection];\n        }\n        const boundingRectToUse = boundingRects[i === 0 ? 0 : indexOfCurrentSection];\n        percentThroughSection = Math.abs(boundingRectToUse.top) / (Math.abs(boundingRectToUse.top) + Math.abs(boundingRectToUse.bottom))  * 100;\n        break;\n      }\n    }\n    this.setGradientPercent(sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection);\n  }\n\n  setGradientPercent = (sections, currentSection, percentThroughSection, isEnd, indexOfCurrentSection) => {\n    const selectedGradient = this.getLinearGradient(percentThroughSection);\n    const isEndGradient = this.getLinearGradient(100);\n    const normalGradient = this.getLinearGradient(0);\n    \n    for (let i = 0; i < sections.length; i++) {\n      let gradientToUse = selectedGradient;\n      let shouldAddActiveClass = true;\n      const section = sections[i];\n      const pageNavSectionName = capitalize(section.dataset.section);\n      const pageNavSectionElement = document.querySelector(`.page-nav__section-${pageNavSectionName}`)\n\n\n      if (isEnd && i >= indexOfCurrentSection) {\n        gradientToUse = isEndGradient;\n      }\n      else if (!currentSection?.className.match(new RegExp(pageNavSectionName, 'ig'))) {\n        gradientToUse = normalGradient;\n        shouldAddActiveClass = false;\n      }\n\n      pageNavSectionElement.style.backgroundImage = gradientToUse;\n\n      if (shouldAddActiveClass) pageNavSectionElement.parentNode?.classList?.add(PageNav.selectedClass)\n      else pageNavSectionElement.parentNode?.classList?.remove(PageNav.selectedClass);\n\n      const amountToScale = (PageNav.activeScaleRange.max - PageNav.activeScaleRange.min);\n\n      let docStyle = getComputedStyle(document.documentElement);\n      docStyle.setProperty('--my-variable-name', a);\n    }\n  }\n\n  renderSections = () => {\n    const { previousUrl } = this.props;\n    const currentUrl = this.props.match?.url;\n\n    if (!previousUrl || previousUrl !== currentUrl) this.props.setPreviousUrl(currentUrl);\n\n    let sectionNames = [];\n    const sections = document.querySelectorAll('[data-section]');\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const capitalized = capitalize(section.dataset.section);\n      sectionNames.push(capitalized)\n    }\n    \n    return sectionNames.map((sectionName, index, array) => {\n      return (\n        <li \n          key={sectionName} \n          className={`${PageNav.cssClass}__section-group`}\n        >\n          <a \n            href={`${this.props.match.url}#${sectionName?.toLowerCase()}`} \n            className={`${PageNav.cssClass}__section ${PageNav.cssClass}__section-${sectionName}`}\n          >\n            {sectionName}\n            &nbsp;\n          </a>\n          {/* {index < (array.length - 1) ?\n            <span>/</span>\n          : \n            null\n          } */}\n          &nbsp;\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      ReactDOM.createPortal(\n        //The idea behind this component is to have a nav element that has quick links  to the sections of each page\n        <React.Fragment>\n          {this.renderSections()}\n        </React.Fragment>\n      ,\n        document.querySelector('.page-nav')\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { \n    previousUrl: state.general.previousUrl\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setPreviousUrl,\n  setScrollPercent,\n})(PageNav);"]},"metadata":{},"sourceType":"module"}