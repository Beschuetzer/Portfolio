{"ast":null,"code":"import github from '../apis/github';\nimport { GET_REPOSITORIES } from './types'; //Example Action Creator\n//export const selectSong = (song) => {\n//    return {\n//        type: \"SONG_SELECTED\",\n//        payload: song,\n//    }\n//}\n\nexport const getRepositories = () => async (dispatch, getStore) => {\n  const introspection = `\n    query {\n      __type(name: \"Repository\") {\n        name\n        kind\n        description\n        fields {\n          name\n        }\n      }\n    }\n  `;\n  const query = `query {\n    repositories(first:50) {\n      nodes {\n        created_at\n        description\n        name\n        updated_at\n        topics\n      }\n    }\n  }`;\n  const response = await github(introspection);\n  dispatch({\n    type: GET_REPOSITORIES,\n    payload: response.data\n  }); //TODO: figure out how to sort repos by skills used (create a skills obj then reference those skill in a repos obj)\n  //created_at, description, name, updated_at\n};","map":{"version":3,"sources":["/home/adam/github/WebDevelopmentStuff/portfolio_site/src/actions/index.js"],"names":["github","GET_REPOSITORIES","getRepositories","dispatch","getStore","introspection","query","response","type","payload","data"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AACA,SACEC,gBADF,QAEO,SAFP,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjE,QAAMC,aAAa,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXE;AAYA,QAAMC,KAAK,GACV;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAXE;AAaA,QAAMC,QAAQ,GAAG,MAAMP,MAAM,CAACK,aAAD,CAA7B;AAEAF,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEP,gBADC;AAEPQ,IAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFX,GAAD,CAAR,CA5BiE,CAiCjE;AACA;AACD,CAnCM","sourcesContent":["import github from '../apis/github';\nimport {\n  GET_REPOSITORIES,\n} from './types';\n//Example Action Creator\n//export const selectSong = (song) => {\n//    return {\n//        type: \"SONG_SELECTED\",\n//        payload: song,\n//    }\n//}\n    \nexport const getRepositories = () => async (dispatch, getStore) => {\n  const introspection = `\n    query {\n      __type(name: \"Repository\") {\n        name\n        kind\n        description\n        fields {\n          name\n        }\n      }\n    }\n  `\n  const query = \n  `query {\n    repositories(first:50) {\n      nodes {\n        created_at\n        description\n        name\n        updated_at\n        topics\n      }\n    }\n  }`\n\n  const response = await github(introspection);\n\n  dispatch({\n    type: GET_REPOSITORIES,\n    payload: response.data,\n  });\n\n  //TODO: figure out how to sort repos by skills used (create a skills obj then reference those skill in a repos obj)\n  //created_at, description, name, updated_at\n}"]},"metadata":{},"sourceType":"module"}