Bridge
    1. Why (purpose)
        I. There was no free online bridge resource in May of 2020. 
        II. A good friend from MN mentioned how much he missed playing Bridge now that he couldn’t play Bridge in person due to the COVID 19 pandemic.
        III. My current position at Ricoh was not panning out as I had expected.
        IV. I had always been in love with the idea of becoming a programmer (my dad was a programmer for a company called Deluxe in MN.  However, I saw how much my dad’s new position as a project manager caused him a lot of stress, which eventually to a heart attack.  I naively attributed his heart attack to coding in my mind and decided to pursue other things, even though I had a thing for programming.), and I finally realized that this may be my last chance to become a programmer.  I saw A#Maj as a test of whether or not I had what it takes to become a programmer. 

        I had just finished reading a book on c# (see downloader and playlist syncer apps) and initially tried to create a working networking demo in c#.  I soon realized that it would be rather challenging to create the project that I had envisioned using c#.  I began to research other solutions…  

        Eventually, I came across socket.io.  It was at this point that I decided to learn all the skills 		      necessary to create the online multiplayer bridge app I had imagined.

    2. How (Strategy)
        I. take web development bootcamp to learn all of the basics of web development
        II. learn about socket.io in order to add real-time multiplayer functionality
        III. learn about animations and drawing graphics to draw the cards and card play animations

        Ultimately, the bootcamp I decided on was Colt Steele’s Web bootcamp (this was before he updated it in 2020, so the videos were from 2015).  The technology he used in his course ultimately influenced what technologies I would choose for A#Maj Bridge (as I was already familiar with them and I figured if he chose them, they must be ‘good’ choices).  If I  had taken some time to research alternatives to JS vector graphic libraries, I may have been able to avoid the compatibility issues that A#Maj Bridge has with regards to mobile iOS devices.  Lesson learned!

        The stack I used for A#Maj Bridge is:
          1. Express
          2. EJS
          3. MongoDB
          4. Vanilla JS, CSS, and HTML (I figured it would be good to learn the vanilla versions of JS, CSS, and HTML initially as it would form the foundation of my future as opposed to using SASS and a frontend framework like React, which would’ve added 1 – 1.5 months of time to the project start date.  Seeing as I was focused on producing a working demo asap, this was not very appealing.)
           
    3. Challenges (and solutions)
        I. how to organize the project
        II. whether to have each phase of the game have its own url or just show/hide elements depending on the game’s phase
        III. figuring out how to get socket.io events to trigger changes inside of paper.js (this was challenging because I hadn’t read the docs initially about PaperScript interoperability (http://paperjs.org/tutorials/getting-started/paperscript-interoperability/)
        IV. how to create an easy to use ‘claim some’ interface
        V. how to remember which theme a user chose on page and keep that henceforth (difficult because was not aware of localStorage in the browser)
       
    4. Lessons Learned
        I. My way of thinking was not optimal.  Rather than thinking like ‘X is better than Y’, a better way of thinking is “What is the best technology/approach for what I am trying to achieve?”. Depending on the project requirements and deadlines, the answer will change.
        II. Frameworks like SASS and React really make project organization much more convenient (there are multiple 5000+ line files in A#Maj)
        III. Read the docs before diving in!  I spent 1 month learning how to draw a deck of cards in paper.js then eventually read the docs (for an unrelated issue) and found out you can just import Raster images...

    5. Features
        I. card play animations
        II. Undo Feature
        III. Save Games (need to capture)
        IV. dynamic resizing
        IV. Claim all
        VIII. Claim some
        VII. Deal Summary
        V. User Preferences
        VI. Color Themes
        X. drag and drop playing