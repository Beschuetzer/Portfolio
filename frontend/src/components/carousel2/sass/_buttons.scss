@use "sass:math";

$pauseButtonVerticalHeight: calc(#{$buttonWidth} * .85);

.#{$carouselClassname}-button {
    @include button();

    &--arrow {

        &-left,
        &-right {

            &-one,
            &-two {
                background-color: $itemViewerBackgroundColor;
                width: calc($buttonLineWidth / 2);
                height: $carouselPageChangeButtonHeight;
            }
        }

        &-left {
            &-one {
                @include positionButton($rotation: -45deg, $top: calc((50% + $carouselPageChangeButtonTranslationAmount) - $carouselPageChangeButtonTranslationAmountTwo));

            }

            &-two {
                @include positionButton($rotation: 45deg, $top: calc((50% - $carouselPageChangeButtonTranslationAmount) + $carouselPageChangeButtonTranslationAmountTwo));
            }
        }

        &-right {
            &-one {
                @include positionButton($rotation: -45deg, $top: calc((50% - $carouselPageChangeButtonTranslationAmount) + $carouselPageChangeButtonTranslationAmountTwo));

            }

            &-two {
                @include positionButton($rotation: 45deg, $top: calc((50% + $carouselPageChangeButtonTranslationAmount) - $carouselPageChangeButtonTranslationAmountTwo));
            }
        }
    }

    @include closeButton;

    &--next {
        &-left {
            @include triangle;
            @include positionButton($xTranslate: -75%);
        }

        &-right {
            @include pauseBar($width: calc($buttonLineWidth / 2));
        }
    }

    &--inverse {
        transform: translateX(calc($buttonWidth * .2));
        margin-top: 0;
    }

    &--fullscreen {
        transition: transform $carouselAnimationDuration ease;
        &-square-outer {
            @include positionButton();
            background-color: $itemViewerButtonColor;
            width: 20px;
            height: 20px;
        }

        &-square-inner {
            @include positionButton();
            background-color: $itemViewerBackgroundColor;
            width: 15px;
            height: 15px;
        }

        &-rect {
            &-horizontal {
                @include positionButton();
                background-color: $itemViewerBackgroundColor;
                width: 100%;
                height: 5px;
            }

            &-vertical {
                @include positionButton();
                background-color: $itemViewerBackgroundColor;
                height: 100%;
                width: 5px;
            }
        }

        &:hover {
            transform: scale(1.15);
        }
    }

    &--pause {

        &-left,
        &-right {
            @include pauseBar;
        }

        &-left {
            @include positionButton($xTranslate: calc(-50% - #{$buttonWidth * .25}), $yTranslate: -50%);
        }
    }

    &--play {
        &-triangle {
            @include positionButton($xTranslate: 22.5%, $left: 0);
            background-color: transparent;
            width: 0;
            height: 0;
            border-top: calc(#{$buttonWidth} / 2.25) solid transparent;
            border-left: calc(#{$buttonWidth} / 1.33) solid $itemViewerButtonColor;
            border-bottom: calc(#{$buttonWidth} / 2.25) solid transparent;
        }
    }

    &--previous {
        &-left {
            @include pauseBar($width: calc($buttonLineWidth / 2));
            @include positionButton($xTranslate: -175%);
        }

        &-right {
            @include triangle($direction: left);
            @include positionButton($xTranslate: -20%);
        }
    }

    &--restart {
        &-arrow {
            @include positionButton();
            right: 0;
            top: 0;
            transform: translate(0%, 15%);
            background-color: transparent;
            width: 0;
            height: 0;
            border-top: calc(#{$buttonWidth} / 2.5) solid transparent;
            border-right: calc(#{$buttonWidth} / 2.5) solid $itemViewerButtonColor;
            border-bottom: none;
        }

        &-circle {

            &-inner,
            &-outer {
                border-radius: 50%;
                @include positionButton();
            }

            &-inner {
                height: calc($pauseButtonVerticalHeight - ($buttonWidth * .5));
                width: calc($pauseButtonVerticalHeight - ($buttonWidth * .5));
                background-color: $itemViewerToolbarBackgroundColor;
            }

            &-outer {
                height: $pauseButtonVerticalHeight;
                width: $pauseButtonVerticalHeight;
            }
        }

        &-triangle-cutout {
            @include positionButton();
            bottom: 0;
            right: 0;
            transform: translate(0, -50%);
            background-color: transparent;
            width: 0;
            height: 0;
            border-top: calc(#{$buttonWidth} / 1) solid transparent;
            border-right: calc(#{$buttonWidth} / 1) solid $itemViewerToolbarBackgroundColor;
            border-bottom: calc(#{$buttonWidth} / 1) solid transparent;
        }

    }

    &--seek-back {

        &-left,
        &-right {
            @include triangle;
        }

        &-left {
            @include positionButton($xTranslate: -100%, $rotation: 180deg);
        }

        &-right {
            @include positionButton($xTranslate: 0%, $rotation: 180deg);
        }
    }

    &--seek-forward {

        &-left,
        &-right {
            @include triangle;
        }

        &-left {
            @include positionButton($xTranslate: -95%);
        }

        &-right {
            @include positionButton($xTranslate: 5%);
        }
    }

    &--stop {
        @include positionButton();
        height: $pauseButtonVerticalHeight;
        width: calc(#{$pauseButtonVerticalHeight} * .95);
    }

    &--video-state-indicator {
        @include displayFlexCenter();
        @include positionCenter();
        height: $buttonVideoStateIndicatorWidth;
        width: $buttonVideoStateIndicatorWidth;
        border-radius: 50%;
        background-color: $itemViewerBackgroundColor;
        opacity: 0;
        pointer-events: none;
        z-index: 1000000000000;
        transform-origin: center;

        & * {
            cursor: auto !important;
        }

        &-is-animating {
            //nameOfKeyFrameToStart = @keyframes name
            //durationInSeconds = the timeframe length, the total duration of the animation from start to the end.
            //delayInSeconds = the delay before our animation will start.
            //iterationCount = how many times it will iterate through animation (0 | 10 | infinite)
            //timingFunction = sets the animation speed ( linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier ).
            //direction = gives you the ability to change the loop direction, from start to end ,or from end to start, or both (normal | reverse | alternate | alternate-reverse).
            //fillMode = specifies which styles in keyframe will be applied to the element when our animation is finished ( none | forwards | backwards | both )
            -webkit-animation: video-state-indicator $buttonVideoStateIndictatorAnimationSpeed 1 linear alternate none;
            -moz-animation: video-state-indicator $buttonVideoStateIndictatorAnimationSpeed 1 linear alternate none;
            -ms-animation: video-state-indicator $buttonVideoStateIndictatorAnimationSpeed 1 linear alternate none;
            -o-animation: video-state-indicator $buttonVideoStateIndictatorAnimationSpeed 1 linear alternate none;
            animation: video-state-indicator $buttonVideoStateIndictatorAnimationSpeed 1 linear alternate none;
        }
    }

}

@keyframes video-state-indicator {
    0% {
        opacity: .5;
        transform: translate(-50%, -50%) scale(1);
    }

    100% {
        opacity: 0;
        transform: translate(-50%, -50%) scale(2);
    }
}